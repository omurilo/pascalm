Terminals unused in grammar

    L_BRACE
    R_BRACE
    SQRT


State 229 conflicts: 2 reduce/reduce


Grammar

    0 $accept: pascal_program $end

    1 pascal_program: PROGRAM IDENTIFIER program_headingopt SEMICOLON block DOT

    2 program_headingopt: L_PAREN identifier_list R_PAREN
    3                   | empty

    4 identifier_list: identifier
    5                | identifier_list COMMA identifier

    6 block: block1
    7      | label_declaration SEMICOLON block1

    8 block1: block2
    9       | constant_declaration SEMICOLON block2

   10 block2: block3
   11       | type_declaration SEMICOLON block3

   12 block3: block4
   13       | variable_declaration SEMICOLON block4

   14 block4: block5
   15       | proc_and_func_declaration SEMICOLON block5

   16 block5: BEGIN_TOK statement_list END

   17 label_declaration: LABEL unsigned_integer
   18                  | label_declaration COMMA unsigned_integer

   19 constant_declaration: CONST constid EQ constant
   20                     | constant_declaration SEMICOLON constid EQ constant

   21 type_declaration: TYPE typeid EQ type
   22                 | type_declaration SEMICOLON typeid EQ type

   23 variable_declaration: VAR variableid_list COLON type
   24                     | variable_declaration SEMICOLON variableid_list COLON type

   25 variableid_list: identifier
   26                | variableid_list COMMA identifier

   27 constant: integer_literal
   28         | real_literal
   29         | string_literal
   30         | char_literal
   31         | boolean_literal
   32         | constid
   33         | PLUS constid
   34         | MINUS constid

   35 type: simple_type
   36     | structured_type
   37     | CARET typeid

   38 simple_type: L_PAREN identifier_list R_PAREN
   39            | constant DOTDOT constant
   40            | typeid

   41 structured_type: unpacked_structured_type
   42                | PACKED unpacked_structured_type

   43 unpacked_structured_type: ARRAY L_BRACKET index_list R_BRACKET OF type
   44                         | RECORD field_list END
   45                         | SET OF simple_type
   46                         | FILE_TOK
   47                         | FILE_TOK OF type

   48 index_list: simple_type
   49           | index_list COMMA simple_type

   50 field_list: fixed_part
   51           | fixed_part SEMICOLON variant_part
   52           | variant_part
   53           | empty

   54 fixed_part: record_field
   55           | fixed_part SEMICOLON record_field

   56 record_field: empty
   57             | fieldid_list COLON type

   58 fieldid_list: fieldid
   59             | fieldid_list COMMA fieldid

   60 variant_part: CASE tag_field OF variant_list

   61 tag_field: typeid
   62          | identifier COLON typeid

   63 variant_list: variant
   64             | variant_list SEMICOLON variant

   65 variant: empty
   66        | case_label_list COLON L_PAREN field_list R_PAREN

   67 proc_and_func_declaration: proc_or_func
   68                          | proc_and_func_declaration SEMICOLON proc_or_func

   69 proc_or_func: PROCEDURE procid parameters SEMICOLON block_or_forward
   70             | FUNCTION funcid parameters COLON typeid SEMICOLON block_or_forward

   71 block_or_forward: block
   72                 | FORWARD

   73 parameters: L_PAREN formal_parameter_list R_PAREN

   74 formal_parameter_list: formal_parameter_section
   75                      | formal_parameter_list SEMICOLON formal_parameter_section

   76 formal_parameter_section: parameterid_list COLON typeid
   77                         | VAR parameterid_list COLON typeid
   78                         | PROCEDURE identifier parameters
   79                         | FUNCTION identifier parameters COLON typeid

   80 parameterid_list: identifier
   81                 | parameterid_list COMMA identifier

   82 statement_list: statement
   83               | statement_list SEMICOLON optional_statement

   84 optional_statement: statement
   85                   | empty

   86 statement: variable ASSIGN expression
   87          | BEGIN_TOK statement_list END
   88          | IF expression THEN statement
   89          | IF expression THEN statement ELSE statement
   90          | CASE expression OF case_list END
   91          | CASE expression OF case_list SEMICOLON case_else END
   92          | WHILE expression DO statement
   93          | REPEAT statement_list UNTIL expression
   94          | FOR varid ASSIGN for_list DO statement
   95          | procid
   96          | procid L_PAREN optional_expression_list R_PAREN
   97          | GOTO label
   98          | WITH record_variable_list DO statement
   99          | label COLON statement

  100 variable: varid
  101         | variable L_BRACKET subscript_list R_BRACKET
  102         | variable DOT fieldid
  103         | variable CARET

  104 subscript_list: expression
  105               | subscript_list COMMA expression

  106 case_list: case_item
  107          | case_list SEMICOLON case_item

  108 case_item: case_label_list COLON statement

  109 case_label_list: case_label
  110                | case_label_list COMMA case_label

  111 case_label: constant
  112           | constant DOTDOT constant

  113 case_else: ELSE statement SEMICOLON

  114 for_list: expression TO expression
  115         | expression DOWNTO expression

  116 optional_expression_list: empty
  117                         | expression_list

  118 expression_list: expression
  119                | expression_list COMMA expression

  120 label: unsigned_integer

  121 record_variable_list: variable
  122                     | record_variable_list COMMA variable

  123 expression: expression LT additive_expression
  124           | expression LTE additive_expression
  125           | expression EQ additive_expression
  126           | expression NEQ additive_expression
  127           | expression GTE additive_expression
  128           | expression GT additive_expression
  129           | additive_expression

  130 additive_expression: additive_expression PLUS multiplicative_expression
  131                    | additive_expression MINUS multiplicative_expression
  132                    | additive_expression OR multiplicative_expression
  133                    | multiplicative_expression

  134 multiplicative_expression: multiplicative_expression TIMES unary_expression
  135                          | multiplicative_expression DIVIDE unary_expression
  136                          | multiplicative_expression DIV unary_expression
  137                          | multiplicative_expression MOD unary_expression
  138                          | multiplicative_expression AND unary_expression
  139                          | multiplicative_expression IN unary_expression
  140                          | unary_expression

  141 unary_expression: PLUS unary_expression
  142                 | MINUS unary_expression
  143                 | NOT unary_expression
  144                 | primary_expression

  145 primary_expression: variable
  146                   | unsigned_integer
  147                   | unsigned_real
  148                   | string_literal
  149                   | char_literal
  150                   | NIL
  151                   | funcid L_PAREN optional_expression_list R_PAREN
  152                   | L_BRACKET element_list R_BRACKET
  153                   | L_PAREN expression R_PAREN

  154 element_list: empty
  155             | element_list_non_empty

  156 element_list_non_empty: element
  157                       | element_list_non_empty COMMA element

  158 element: expression
  159        | expression DOTDOT expression

  160 constid: identifier

  161 typeid: CHAR
  162       | BOOLEAN
  163       | INTEGER
  164       | REAL
  165       | STRING
  166       | identifier

  167 funcid: identifier
  168       | CHR

  169 procid: identifier
  170       | WRITE
  171       | WRITELN
  172       | READ
  173       | READLN

  174 fieldid: identifier

  175 varid: identifier

  176 identifier: IDENTIFIER

  177 unsigned_integer: INTEGER_LITERAL

  178 unsigned_real: REAL_LITERAL

  179 integer_literal: INTEGER_LITERAL

  180 real_literal: REAL_LITERAL

  181 string_literal: STRING_LITERAL

  182 char_literal: CHAR_LITERAL

  183 boolean_literal: BOOLEAN_LITERAL

  184 empty: Îµ


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    PROGRAM (258) 1
    VAR (259) 23 77
    CONST (260) 19
    TYPE (261) 21
    LABEL (262) 17
    PROCEDURE (263) 69 78
    FUNCTION (264) 70 79
    BEGIN_TOK (265) 16 87
    END (266) 16 44 87 90 91
    IF (267) 88 89
    THEN (268) 88 89
    ELSE (269) 89 113
    NIL (270) 150
    WITH (271) 98
    FORWARD (272) 72
    PACKED (273) 42
    WHILE (274) 92
    DO (275) 92 94 98
    FOR (276) 94
    TO (277) 114
    DOWNTO (278) 115
    REPEAT (279) 93
    UNTIL (280) 93
    CASE (281) 60 90 91
    OF (282) 43 45 47 60 90 91
    GOTO (283) 97
    INTEGER (284) 163
    REAL (285) 164
    BOOLEAN (286) 162
    CHAR (287) 161
    ARRAY (288) 43
    RECORD (289) 44
    SET (290) 45
    FILE_TOK (291) 46 47
    STRING (292) 165
    READ (293) 172
    WRITE (294) 170
    READLN (295) 173
    WRITELN (296) 171
    CHR (297) 168
    GT (298) 128
    GTE (299) 127
    LT (300) 123
    LTE (301) 124
    NEQ (302) 126
    EQ (303) 19 20 21 22 125
    AND (304) 138
    OR (305) 132
    NOT (306) 143
    PLUS (307) 33 130 141
    MINUS (308) 34 131 142
    TIMES (309) 134
    DIVIDE (310) 135
    DIV (311) 136
    MOD (312) 137
    DOT (313) 1 102
    DOTDOT (314) 39 112 159
    CARET (315) 37 103
    ASSIGN (316) 86 94
    SEMICOLON (317) 1 7 9 11 13 15 20 22 24 51 55 64 68 69 70 75 83 91 107 113
    COMMA (318) 5 18 26 49 59 81 105 110 119 122 157
    COLON (319) 23 24 57 62 66 70 76 77 79 99 108
    L_PAREN (320) 2 38 66 73 96 151 153
    R_PAREN (321) 2 38 66 73 96 151 153
    L_BRACE (322)
    R_BRACE (323)
    L_BRACKET (324) 43 101 152
    R_BRACKET (325) 43 101 152
    CHAR_LITERAL <character> (326) 182
    INTEGER_LITERAL <integer> (327) 177 179
    REAL_LITERAL <number> (328) 178 180
    BOOLEAN_LITERAL <boolean> (329) 183
    IDENTIFIER <string> (330) 1 176
    STRING_LITERAL <string> (331) 181
    SQRT (332)
    NEG (333)
    IN (334) 139
    LOWER_THAN_ELSE (335)


Nonterminals, with rules where they appear

    $accept (81)
        on left: 0
    pascal_program <node> (82)
        on left: 1
        on right: 0
    program_headingopt <node> (83)
        on left: 2 3
        on right: 1
    identifier_list <node> (84)
        on left: 4 5
        on right: 2 5 38
    block <node> (85)
        on left: 6 7
        on right: 1 71
    block1 <node> (86)
        on left: 8 9
        on right: 6 7
    block2 <node> (87)
        on left: 10 11
        on right: 8 9
    block3 <node> (88)
        on left: 12 13
        on right: 10 11
    block4 <node> (89)
        on left: 14 15
        on right: 12 13
    block5 <node> (90)
        on left: 16
        on right: 14 15
    label_declaration <node> (91)
        on left: 17 18
        on right: 7 18
    constant_declaration <node> (92)
        on left: 19 20
        on right: 9 20
    type_declaration <node> (93)
        on left: 21 22
        on right: 11 22
    variable_declaration <node> (94)
        on left: 23 24
        on right: 13 24
    variableid_list <node> (95)
        on left: 25 26
        on right: 23 24 26
    constant <node> (96)
        on left: 27 28 29 30 31 32 33 34
        on right: 19 20 39 111 112
    type <node> (97)
        on left: 35 36 37
        on right: 21 22 23 24 43 47 57
    simple_type <node> (98)
        on left: 38 39 40
        on right: 35 45 48 49
    structured_type <node> (99)
        on left: 41 42
        on right: 36
    unpacked_structured_type <node> (100)
        on left: 43 44 45 46 47
        on right: 41 42
    index_list <node> (101)
        on left: 48 49
        on right: 43 49
    field_list <node> (102)
        on left: 50 51 52 53
        on right: 44 66
    fixed_part <node> (103)
        on left: 54 55
        on right: 50 51 55
    record_field <node> (104)
        on left: 56 57
        on right: 54 55
    fieldid_list <node> (105)
        on left: 58 59
        on right: 57 59
    variant_part <node> (106)
        on left: 60
        on right: 51 52
    tag_field <node> (107)
        on left: 61 62
        on right: 60
    variant_list <node> (108)
        on left: 63 64
        on right: 60 64
    variant <node> (109)
        on left: 65 66
        on right: 63 64
    proc_and_func_declaration <node> (110)
        on left: 67 68
        on right: 15 68
    proc_or_func <node> (111)
        on left: 69 70
        on right: 67 68
    block_or_forward <node> (112)
        on left: 71 72
        on right: 69 70
    parameters <node> (113)
        on left: 73
        on right: 69 70 78 79
    formal_parameter_list <node> (114)
        on left: 74 75
        on right: 73 75
    formal_parameter_section <node> (115)
        on left: 76 77 78 79
        on right: 74 75
    parameterid_list <node> (116)
        on left: 80 81
        on right: 76 77 81
    statement_list <node> (117)
        on left: 82 83
        on right: 16 83 87 93
    optional_statement <node> (118)
        on left: 84 85
        on right: 83
    statement <node> (119)
        on left: 86 87 88 89 90 91 92 93 94 95 96 97 98 99
        on right: 82 84 88 89 92 94 98 99 108 113
    variable <node> (120)
        on left: 100 101 102 103
        on right: 86 101 102 103 121 122 145
    subscript_list <node> (121)
        on left: 104 105
        on right: 101 105
    case_list <node> (122)
        on left: 106 107
        on right: 90 91 107
    case_item <node> (123)
        on left: 108
        on right: 106 107
    case_label_list <node> (124)
        on left: 109 110
        on right: 66 108 110
    case_label <node> (125)
        on left: 111 112
        on right: 109 110
    case_else <node> (126)
        on left: 113
        on right: 91
    for_list <node> (127)
        on left: 114 115
        on right: 94
    optional_expression_list <node> (128)
        on left: 116 117
        on right: 96 151
    expression_list <node> (129)
        on left: 118 119
        on right: 117 119
    label <node> (130)
        on left: 120
        on right: 97 99
    record_variable_list <node> (131)
        on left: 121 122
        on right: 98 122
    expression <node> (132)
        on left: 123 124 125 126 127 128 129
        on right: 86 88 89 90 91 92 93 104 105 114 115 118 119 123 124 125 126 127 128 153 158 159
    additive_expression <node> (133)
        on left: 130 131 132 133
        on right: 123 124 125 126 127 128 129 130 131 132
    multiplicative_expression <node> (134)
        on left: 134 135 136 137 138 139 140
        on right: 130 131 132 133 134 135 136 137 138 139
    unary_expression <node> (135)
        on left: 141 142 143 144
        on right: 134 135 136 137 138 139 140 141 142 143
    primary_expression <node> (136)
        on left: 145 146 147 148 149 150 151 152 153
        on right: 144
    element_list <node> (137)
        on left: 154 155
        on right: 152
    element_list_non_empty <node> (138)
        on left: 156 157
        on right: 155 157
    element <node> (139)
        on left: 158 159
        on right: 156 157
    constid <node> (140)
        on left: 160
        on right: 19 20 32 33 34
    typeid <node> (141)
        on left: 161 162 163 164 165 166
        on right: 21 22 37 40 61 62 70 76 77 79
    funcid <node> (142)
        on left: 167 168
        on right: 70 151
    procid <node> (143)
        on left: 169 170 171 172 173
        on right: 69 95 96
    fieldid <node> (144)
        on left: 174
        on right: 58 59 102
    varid <node> (145)
        on left: 175
        on right: 94 100
    identifier <node> (146)
        on left: 176
        on right: 4 5 25 26 62 78 79 80 81 160 166 167 169 174 175
    unsigned_integer <node> (147)
        on left: 177
        on right: 17 18 120 146
    unsigned_real <node> (148)
        on left: 178
        on right: 147
    integer_literal <node> (149)
        on left: 179
        on right: 27
    real_literal <node> (150)
        on left: 180
        on right: 28
    string_literal <node> (151)
        on left: 181
        on right: 29 148
    char_literal <node> (152)
        on left: 182
        on right: 30 149
    boolean_literal <node> (153)
        on left: 183
        on right: 31
    empty <node> (154)
        on left: 184
        on right: 3 53 56 65 85 116 154


State 0

    0 $accept: â¢ pascal_program $end

    PROGRAM  shift, and go to state 1

    pascal_program  go to state 2


State 1

    1 pascal_program: PROGRAM â¢ IDENTIFIER program_headingopt SEMICOLON block DOT

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: pascal_program â¢ $end

    $end  shift, and go to state 4


State 3

    1 pascal_program: PROGRAM IDENTIFIER â¢ program_headingopt SEMICOLON block DOT

    L_PAREN  shift, and go to state 5

    $default  reduce using rule 184 (empty)

    program_headingopt  go to state 6
    empty               go to state 7


State 4

    0 $accept: pascal_program $end â¢

    $default  accept


State 5

    2 program_headingopt: L_PAREN â¢ identifier_list R_PAREN

    IDENTIFIER  shift, and go to state 8

    identifier_list  go to state 9
    identifier       go to state 10


State 6

    1 pascal_program: PROGRAM IDENTIFIER program_headingopt â¢ SEMICOLON block DOT

    SEMICOLON  shift, and go to state 11


State 7

    3 program_headingopt: empty â¢

    $default  reduce using rule 3 (program_headingopt)


State 8

  176 identifier: IDENTIFIER â¢

    $default  reduce using rule 176 (identifier)


State 9

    2 program_headingopt: L_PAREN identifier_list â¢ R_PAREN
    5 identifier_list: identifier_list â¢ COMMA identifier

    COMMA    shift, and go to state 12
    R_PAREN  shift, and go to state 13


State 10

    4 identifier_list: identifier â¢

    $default  reduce using rule 4 (identifier_list)


State 11

    1 pascal_program: PROGRAM IDENTIFIER program_headingopt SEMICOLON â¢ block DOT

    VAR        shift, and go to state 14
    CONST      shift, and go to state 15
    TYPE       shift, and go to state 16
    LABEL      shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    FUNCTION   shift, and go to state 19
    BEGIN_TOK  shift, and go to state 20

    block                      go to state 21
    block1                     go to state 22
    block2                     go to state 23
    block3                     go to state 24
    block4                     go to state 25
    block5                     go to state 26
    label_declaration          go to state 27
    constant_declaration       go to state 28
    type_declaration           go to state 29
    variable_declaration       go to state 30
    proc_and_func_declaration  go to state 31
    proc_or_func               go to state 32


State 12

    5 identifier_list: identifier_list COMMA â¢ identifier

    IDENTIFIER  shift, and go to state 8

    identifier  go to state 33


State 13

    2 program_headingopt: L_PAREN identifier_list R_PAREN â¢

    $default  reduce using rule 2 (program_headingopt)


State 14

   23 variable_declaration: VAR â¢ variableid_list COLON type

    IDENTIFIER  shift, and go to state 8

    variableid_list  go to state 34
    identifier       go to state 35


State 15

   19 constant_declaration: CONST â¢ constid EQ constant

    IDENTIFIER  shift, and go to state 8

    constid     go to state 36
    identifier  go to state 37


State 16

   21 type_declaration: TYPE â¢ typeid EQ type

    INTEGER     shift, and go to state 38
    REAL        shift, and go to state 39
    BOOLEAN     shift, and go to state 40
    CHAR        shift, and go to state 41
    STRING      shift, and go to state 42
    IDENTIFIER  shift, and go to state 8

    typeid      go to state 43
    identifier  go to state 44


State 17

   17 label_declaration: LABEL â¢ unsigned_integer

    INTEGER_LITERAL  shift, and go to state 45

    unsigned_integer  go to state 46


State 18

   69 proc_or_func: PROCEDURE â¢ procid parameters SEMICOLON block_or_forward

    READ        shift, and go to state 47
    WRITE       shift, and go to state 48
    READLN      shift, and go to state 49
    WRITELN     shift, and go to state 50
    IDENTIFIER  shift, and go to state 8

    procid      go to state 51
    identifier  go to state 52


State 19

   70 proc_or_func: FUNCTION â¢ funcid parameters COLON typeid SEMICOLON block_or_forward

    CHR         shift, and go to state 53
    IDENTIFIER  shift, and go to state 8

    funcid      go to state 54
    identifier  go to state 55


State 20

   16 block5: BEGIN_TOK â¢ statement_list END

    BEGIN_TOK        shift, and go to state 56
    IF               shift, and go to state 57
    WITH             shift, and go to state 58
    WHILE            shift, and go to state 59
    FOR              shift, and go to state 60
    REPEAT           shift, and go to state 61
    CASE             shift, and go to state 62
    GOTO             shift, and go to state 63
    READ             shift, and go to state 47
    WRITE            shift, and go to state 48
    READLN           shift, and go to state 49
    WRITELN          shift, and go to state 50
    INTEGER_LITERAL  shift, and go to state 45
    IDENTIFIER       shift, and go to state 8

    statement_list    go to state 64
    statement         go to state 65
    variable          go to state 66
    label             go to state 67
    procid            go to state 68
    varid             go to state 69
    identifier        go to state 70
    unsigned_integer  go to state 71


State 21

    1 pascal_program: PROGRAM IDENTIFIER program_headingopt SEMICOLON block â¢ DOT

    DOT  shift, and go to state 72


State 22

    6 block: block1 â¢

    $default  reduce using rule 6 (block)


State 23

    8 block1: block2 â¢

    $default  reduce using rule 8 (block1)


State 24

   10 block2: block3 â¢

    $default  reduce using rule 10 (block2)


State 25

   12 block3: block4 â¢

    $default  reduce using rule 12 (block3)


State 26

   14 block4: block5 â¢

    $default  reduce using rule 14 (block4)


State 27

    7 block: label_declaration â¢ SEMICOLON block1
   18 label_declaration: label_declaration â¢ COMMA unsigned_integer

    SEMICOLON  shift, and go to state 73
    COMMA      shift, and go to state 74


State 28

    9 block1: constant_declaration â¢ SEMICOLON block2
   20 constant_declaration: constant_declaration â¢ SEMICOLON constid EQ constant

    SEMICOLON  shift, and go to state 75


State 29

   11 block2: type_declaration â¢ SEMICOLON block3
   22 type_declaration: type_declaration â¢ SEMICOLON typeid EQ type

    SEMICOLON  shift, and go to state 76


State 30

   13 block3: variable_declaration â¢ SEMICOLON block4
   24 variable_declaration: variable_declaration â¢ SEMICOLON variableid_list COLON type

    SEMICOLON  shift, and go to state 77


State 31

   15 block4: proc_and_func_declaration â¢ SEMICOLON block5
   68 proc_and_func_declaration: proc_and_func_declaration â¢ SEMICOLON proc_or_func

    SEMICOLON  shift, and go to state 78


State 32

   67 proc_and_func_declaration: proc_or_func â¢

    $default  reduce using rule 67 (proc_and_func_declaration)


State 33

    5 identifier_list: identifier_list COMMA identifier â¢

    $default  reduce using rule 5 (identifier_list)


State 34

   23 variable_declaration: VAR variableid_list â¢ COLON type
   26 variableid_list: variableid_list â¢ COMMA identifier

    COMMA  shift, and go to state 79
    COLON  shift, and go to state 80


State 35

   25 variableid_list: identifier â¢

    $default  reduce using rule 25 (variableid_list)


State 36

   19 constant_declaration: CONST constid â¢ EQ constant

    EQ  shift, and go to state 81


State 37

  160 constid: identifier â¢

    $default  reduce using rule 160 (constid)


State 38

  163 typeid: INTEGER â¢

    $default  reduce using rule 163 (typeid)


State 39

  164 typeid: REAL â¢

    $default  reduce using rule 164 (typeid)


State 40

  162 typeid: BOOLEAN â¢

    $default  reduce using rule 162 (typeid)


State 41

  161 typeid: CHAR â¢

    $default  reduce using rule 161 (typeid)


State 42

  165 typeid: STRING â¢

    $default  reduce using rule 165 (typeid)


State 43

   21 type_declaration: TYPE typeid â¢ EQ type

    EQ  shift, and go to state 82


State 44

  166 typeid: identifier â¢

    $default  reduce using rule 166 (typeid)


State 45

  177 unsigned_integer: INTEGER_LITERAL â¢

    $default  reduce using rule 177 (unsigned_integer)


State 46

   17 label_declaration: LABEL unsigned_integer â¢

    $default  reduce using rule 17 (label_declaration)


State 47

  172 procid: READ â¢

    $default  reduce using rule 172 (procid)


State 48

  170 procid: WRITE â¢

    $default  reduce using rule 170 (procid)


State 49

  173 procid: READLN â¢

    $default  reduce using rule 173 (procid)


State 50

  171 procid: WRITELN â¢

    $default  reduce using rule 171 (procid)


State 51

   69 proc_or_func: PROCEDURE procid â¢ parameters SEMICOLON block_or_forward

    L_PAREN  shift, and go to state 83

    parameters  go to state 84


State 52

  169 procid: identifier â¢

    $default  reduce using rule 169 (procid)


State 53

  168 funcid: CHR â¢

    $default  reduce using rule 168 (funcid)


State 54

   70 proc_or_func: FUNCTION funcid â¢ parameters COLON typeid SEMICOLON block_or_forward

    L_PAREN  shift, and go to state 83

    parameters  go to state 85


State 55

  167 funcid: identifier â¢

    $default  reduce using rule 167 (funcid)


State 56

   87 statement: BEGIN_TOK â¢ statement_list END

    BEGIN_TOK        shift, and go to state 56
    IF               shift, and go to state 57
    WITH             shift, and go to state 58
    WHILE            shift, and go to state 59
    FOR              shift, and go to state 60
    REPEAT           shift, and go to state 61
    CASE             shift, and go to state 62
    GOTO             shift, and go to state 63
    READ             shift, and go to state 47
    WRITE            shift, and go to state 48
    READLN           shift, and go to state 49
    WRITELN          shift, and go to state 50
    INTEGER_LITERAL  shift, and go to state 45
    IDENTIFIER       shift, and go to state 8

    statement_list    go to state 86
    statement         go to state 65
    variable          go to state 66
    label             go to state 67
    procid            go to state 68
    varid             go to state 69
    identifier        go to state 70
    unsigned_integer  go to state 71


State 57

   88 statement: IF â¢ expression THEN statement
   89          | IF â¢ expression THEN statement ELSE statement

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    expression                 go to state 97
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 58

   98 statement: WITH â¢ record_variable_list DO statement

    IDENTIFIER  shift, and go to state 8

    variable              go to state 108
    record_variable_list  go to state 109
    varid                 go to state 69
    identifier            go to state 110


State 59

   92 statement: WHILE â¢ expression DO statement

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    expression                 go to state 111
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 60

   94 statement: FOR â¢ varid ASSIGN for_list DO statement

    IDENTIFIER  shift, and go to state 8

    varid       go to state 112
    identifier  go to state 110


State 61

   93 statement: REPEAT â¢ statement_list UNTIL expression

    BEGIN_TOK        shift, and go to state 56
    IF               shift, and go to state 57
    WITH             shift, and go to state 58
    WHILE            shift, and go to state 59
    FOR              shift, and go to state 60
    REPEAT           shift, and go to state 61
    CASE             shift, and go to state 62
    GOTO             shift, and go to state 63
    READ             shift, and go to state 47
    WRITE            shift, and go to state 48
    READLN           shift, and go to state 49
    WRITELN          shift, and go to state 50
    INTEGER_LITERAL  shift, and go to state 45
    IDENTIFIER       shift, and go to state 8

    statement_list    go to state 113
    statement         go to state 65
    variable          go to state 66
    label             go to state 67
    procid            go to state 68
    varid             go to state 69
    identifier        go to state 70
    unsigned_integer  go to state 71


State 62

   90 statement: CASE â¢ expression OF case_list END
   91          | CASE â¢ expression OF case_list SEMICOLON case_else END

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    expression                 go to state 114
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 63

   97 statement: GOTO â¢ label

    INTEGER_LITERAL  shift, and go to state 45

    label             go to state 115
    unsigned_integer  go to state 71


State 64

   16 block5: BEGIN_TOK statement_list â¢ END
   83 statement_list: statement_list â¢ SEMICOLON optional_statement

    END        shift, and go to state 116
    SEMICOLON  shift, and go to state 117


State 65

   82 statement_list: statement â¢

    $default  reduce using rule 82 (statement_list)


State 66

   86 statement: variable â¢ ASSIGN expression
  101 variable: variable â¢ L_BRACKET subscript_list R_BRACKET
  102         | variable â¢ DOT fieldid
  103         | variable â¢ CARET

    DOT        shift, and go to state 118
    CARET      shift, and go to state 119
    ASSIGN     shift, and go to state 120
    L_BRACKET  shift, and go to state 121


State 67

   99 statement: label â¢ COLON statement

    COLON  shift, and go to state 122


State 68

   95 statement: procid â¢
   96          | procid â¢ L_PAREN optional_expression_list R_PAREN

    L_PAREN  shift, and go to state 123

    $default  reduce using rule 95 (statement)


State 69

  100 variable: varid â¢

    $default  reduce using rule 100 (variable)


State 70

  169 procid: identifier â¢
  175 varid: identifier â¢

    DOT        reduce using rule 175 (varid)
    CARET      reduce using rule 175 (varid)
    ASSIGN     reduce using rule 175 (varid)
    L_BRACKET  reduce using rule 175 (varid)
    $default   reduce using rule 169 (procid)


State 71

  120 label: unsigned_integer â¢

    $default  reduce using rule 120 (label)


State 72

    1 pascal_program: PROGRAM IDENTIFIER program_headingopt SEMICOLON block DOT â¢

    $default  reduce using rule 1 (pascal_program)


State 73

    7 block: label_declaration SEMICOLON â¢ block1

    VAR        shift, and go to state 14
    CONST      shift, and go to state 15
    TYPE       shift, and go to state 16
    PROCEDURE  shift, and go to state 18
    FUNCTION   shift, and go to state 19
    BEGIN_TOK  shift, and go to state 20

    block1                     go to state 124
    block2                     go to state 23
    block3                     go to state 24
    block4                     go to state 25
    block5                     go to state 26
    constant_declaration       go to state 28
    type_declaration           go to state 29
    variable_declaration       go to state 30
    proc_and_func_declaration  go to state 31
    proc_or_func               go to state 32


State 74

   18 label_declaration: label_declaration COMMA â¢ unsigned_integer

    INTEGER_LITERAL  shift, and go to state 45

    unsigned_integer  go to state 125


State 75

    9 block1: constant_declaration SEMICOLON â¢ block2
   20 constant_declaration: constant_declaration SEMICOLON â¢ constid EQ constant

    VAR         shift, and go to state 14
    TYPE        shift, and go to state 16
    PROCEDURE   shift, and go to state 18
    FUNCTION    shift, and go to state 19
    BEGIN_TOK   shift, and go to state 20
    IDENTIFIER  shift, and go to state 8

    block2                     go to state 126
    block3                     go to state 24
    block4                     go to state 25
    block5                     go to state 26
    type_declaration           go to state 29
    variable_declaration       go to state 30
    proc_and_func_declaration  go to state 31
    proc_or_func               go to state 32
    constid                    go to state 127
    identifier                 go to state 37


State 76

   11 block2: type_declaration SEMICOLON â¢ block3
   22 type_declaration: type_declaration SEMICOLON â¢ typeid EQ type

    VAR         shift, and go to state 14
    PROCEDURE   shift, and go to state 18
    FUNCTION    shift, and go to state 19
    BEGIN_TOK   shift, and go to state 20
    INTEGER     shift, and go to state 38
    REAL        shift, and go to state 39
    BOOLEAN     shift, and go to state 40
    CHAR        shift, and go to state 41
    STRING      shift, and go to state 42
    IDENTIFIER  shift, and go to state 8

    block3                     go to state 128
    block4                     go to state 25
    block5                     go to state 26
    variable_declaration       go to state 30
    proc_and_func_declaration  go to state 31
    proc_or_func               go to state 32
    typeid                     go to state 129
    identifier                 go to state 44


State 77

   13 block3: variable_declaration SEMICOLON â¢ block4
   24 variable_declaration: variable_declaration SEMICOLON â¢ variableid_list COLON type

    PROCEDURE   shift, and go to state 18
    FUNCTION    shift, and go to state 19
    BEGIN_TOK   shift, and go to state 20
    IDENTIFIER  shift, and go to state 8

    block4                     go to state 130
    block5                     go to state 26
    variableid_list            go to state 131
    proc_and_func_declaration  go to state 31
    proc_or_func               go to state 32
    identifier                 go to state 35


State 78

   15 block4: proc_and_func_declaration SEMICOLON â¢ block5
   68 proc_and_func_declaration: proc_and_func_declaration SEMICOLON â¢ proc_or_func

    PROCEDURE  shift, and go to state 18
    FUNCTION   shift, and go to state 19
    BEGIN_TOK  shift, and go to state 20

    block5        go to state 132
    proc_or_func  go to state 133


State 79

   26 variableid_list: variableid_list COMMA â¢ identifier

    IDENTIFIER  shift, and go to state 8

    identifier  go to state 134


State 80

   23 variable_declaration: VAR variableid_list COLON â¢ type

    PACKED           shift, and go to state 135
    INTEGER          shift, and go to state 38
    REAL             shift, and go to state 39
    BOOLEAN          shift, and go to state 40
    CHAR             shift, and go to state 41
    ARRAY            shift, and go to state 136
    RECORD           shift, and go to state 137
    SET              shift, and go to state 138
    FILE_TOK         shift, and go to state 139
    STRING           shift, and go to state 42
    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CARET            shift, and go to state 142
    L_PAREN          shift, and go to state 143
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant                  go to state 147
    type                      go to state 148
    simple_type               go to state 149
    structured_type           go to state 150
    unpacked_structured_type  go to state 151
    constid                   go to state 152
    typeid                    go to state 153
    identifier                go to state 154
    integer_literal           go to state 155
    real_literal              go to state 156
    string_literal            go to state 157
    char_literal              go to state 158
    boolean_literal           go to state 159


State 81

   19 constant_declaration: CONST constid EQ â¢ constant

    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant         go to state 160
    constid          go to state 152
    identifier       go to state 37
    integer_literal  go to state 155
    real_literal     go to state 156
    string_literal   go to state 157
    char_literal     go to state 158
    boolean_literal  go to state 159


State 82

   21 type_declaration: TYPE typeid EQ â¢ type

    PACKED           shift, and go to state 135
    INTEGER          shift, and go to state 38
    REAL             shift, and go to state 39
    BOOLEAN          shift, and go to state 40
    CHAR             shift, and go to state 41
    ARRAY            shift, and go to state 136
    RECORD           shift, and go to state 137
    SET              shift, and go to state 138
    FILE_TOK         shift, and go to state 139
    STRING           shift, and go to state 42
    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CARET            shift, and go to state 142
    L_PAREN          shift, and go to state 143
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant                  go to state 147
    type                      go to state 161
    simple_type               go to state 149
    structured_type           go to state 150
    unpacked_structured_type  go to state 151
    constid                   go to state 152
    typeid                    go to state 153
    identifier                go to state 154
    integer_literal           go to state 155
    real_literal              go to state 156
    string_literal            go to state 157
    char_literal              go to state 158
    boolean_literal           go to state 159


State 83

   73 parameters: L_PAREN â¢ formal_parameter_list R_PAREN

    VAR         shift, and go to state 162
    PROCEDURE   shift, and go to state 163
    FUNCTION    shift, and go to state 164
    IDENTIFIER  shift, and go to state 8

    formal_parameter_list     go to state 165
    formal_parameter_section  go to state 166
    parameterid_list          go to state 167
    identifier                go to state 168


State 84

   69 proc_or_func: PROCEDURE procid parameters â¢ SEMICOLON block_or_forward

    SEMICOLON  shift, and go to state 169


State 85

   70 proc_or_func: FUNCTION funcid parameters â¢ COLON typeid SEMICOLON block_or_forward

    COLON  shift, and go to state 170


State 86

   83 statement_list: statement_list â¢ SEMICOLON optional_statement
   87 statement: BEGIN_TOK statement_list â¢ END

    END        shift, and go to state 171
    SEMICOLON  shift, and go to state 117


State 87

  150 primary_expression: NIL â¢

    $default  reduce using rule 150 (primary_expression)


State 88

  143 unary_expression: NOT â¢ unary_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable            go to state 96
    unary_expression    go to state 172
    primary_expression  go to state 101
    funcid              go to state 102
    varid               go to state 69
    identifier          go to state 103
    unsigned_integer    go to state 104
    unsigned_real       go to state 105
    string_literal      go to state 106
    char_literal        go to state 107


State 89

  141 unary_expression: PLUS â¢ unary_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable            go to state 96
    unary_expression    go to state 173
    primary_expression  go to state 101
    funcid              go to state 102
    varid               go to state 69
    identifier          go to state 103
    unsigned_integer    go to state 104
    unsigned_real       go to state 105
    string_literal      go to state 106
    char_literal        go to state 107


State 90

  142 unary_expression: MINUS â¢ unary_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable            go to state 96
    unary_expression    go to state 174
    primary_expression  go to state 101
    funcid              go to state 102
    varid               go to state 69
    identifier          go to state 103
    unsigned_integer    go to state 104
    unsigned_real       go to state 105
    string_literal      go to state 106
    char_literal        go to state 107


State 91

  153 primary_expression: L_PAREN â¢ expression R_PAREN

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    expression                 go to state 175
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 92

  152 primary_expression: L_BRACKET â¢ element_list R_BRACKET

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    $default  reduce using rule 184 (empty)

    variable                   go to state 96
    expression                 go to state 176
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    element_list               go to state 177
    element_list_non_empty     go to state 178
    element                    go to state 179
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107
    empty                      go to state 180


State 93

  182 char_literal: CHAR_LITERAL â¢

    $default  reduce using rule 182 (char_literal)


State 94

  178 unsigned_real: REAL_LITERAL â¢

    $default  reduce using rule 178 (unsigned_real)


State 95

  181 string_literal: STRING_LITERAL â¢

    $default  reduce using rule 181 (string_literal)


State 96

  101 variable: variable â¢ L_BRACKET subscript_list R_BRACKET
  102         | variable â¢ DOT fieldid
  103         | variable â¢ CARET
  145 primary_expression: variable â¢

    DOT        shift, and go to state 118
    CARET      shift, and go to state 119
    L_BRACKET  shift, and go to state 121

    $default  reduce using rule 145 (primary_expression)


State 97

   88 statement: IF expression â¢ THEN statement
   89          | IF expression â¢ THEN statement ELSE statement
  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression

    THEN  shift, and go to state 181
    GT    shift, and go to state 182
    GTE   shift, and go to state 183
    LT    shift, and go to state 184
    LTE   shift, and go to state 185
    NEQ   shift, and go to state 186
    EQ    shift, and go to state 187


State 98

  129 expression: additive_expression â¢
  130 additive_expression: additive_expression â¢ PLUS multiplicative_expression
  131                    | additive_expression â¢ MINUS multiplicative_expression
  132                    | additive_expression â¢ OR multiplicative_expression

    OR     shift, and go to state 188
    PLUS   shift, and go to state 189
    MINUS  shift, and go to state 190

    $default  reduce using rule 129 (expression)


State 99

  133 additive_expression: multiplicative_expression â¢
  134 multiplicative_expression: multiplicative_expression â¢ TIMES unary_expression
  135                          | multiplicative_expression â¢ DIVIDE unary_expression
  136                          | multiplicative_expression â¢ DIV unary_expression
  137                          | multiplicative_expression â¢ MOD unary_expression
  138                          | multiplicative_expression â¢ AND unary_expression
  139                          | multiplicative_expression â¢ IN unary_expression

    AND     shift, and go to state 191
    TIMES   shift, and go to state 192
    DIVIDE  shift, and go to state 193
    DIV     shift, and go to state 194
    MOD     shift, and go to state 195
    IN      shift, and go to state 196

    $default  reduce using rule 133 (additive_expression)


State 100

  140 multiplicative_expression: unary_expression â¢

    $default  reduce using rule 140 (multiplicative_expression)


State 101

  144 unary_expression: primary_expression â¢

    $default  reduce using rule 144 (unary_expression)


State 102

  151 primary_expression: funcid â¢ L_PAREN optional_expression_list R_PAREN

    L_PAREN  shift, and go to state 197


State 103

  167 funcid: identifier â¢
  175 varid: identifier â¢

    L_PAREN   reduce using rule 167 (funcid)
    $default  reduce using rule 175 (varid)


State 104

  146 primary_expression: unsigned_integer â¢

    $default  reduce using rule 146 (primary_expression)


State 105

  147 primary_expression: unsigned_real â¢

    $default  reduce using rule 147 (primary_expression)


State 106

  148 primary_expression: string_literal â¢

    $default  reduce using rule 148 (primary_expression)


State 107

  149 primary_expression: char_literal â¢

    $default  reduce using rule 149 (primary_expression)


State 108

  101 variable: variable â¢ L_BRACKET subscript_list R_BRACKET
  102         | variable â¢ DOT fieldid
  103         | variable â¢ CARET
  121 record_variable_list: variable â¢

    DOT        shift, and go to state 118
    CARET      shift, and go to state 119
    L_BRACKET  shift, and go to state 121

    $default  reduce using rule 121 (record_variable_list)


State 109

   98 statement: WITH record_variable_list â¢ DO statement
  122 record_variable_list: record_variable_list â¢ COMMA variable

    DO     shift, and go to state 198
    COMMA  shift, and go to state 199


State 110

  175 varid: identifier â¢

    $default  reduce using rule 175 (varid)


State 111

   92 statement: WHILE expression â¢ DO statement
  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression

    DO   shift, and go to state 200
    GT   shift, and go to state 182
    GTE  shift, and go to state 183
    LT   shift, and go to state 184
    LTE  shift, and go to state 185
    NEQ  shift, and go to state 186
    EQ   shift, and go to state 187


State 112

   94 statement: FOR varid â¢ ASSIGN for_list DO statement

    ASSIGN  shift, and go to state 201


State 113

   83 statement_list: statement_list â¢ SEMICOLON optional_statement
   93 statement: REPEAT statement_list â¢ UNTIL expression

    UNTIL      shift, and go to state 202
    SEMICOLON  shift, and go to state 117


State 114

   90 statement: CASE expression â¢ OF case_list END
   91          | CASE expression â¢ OF case_list SEMICOLON case_else END
  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression

    OF   shift, and go to state 203
    GT   shift, and go to state 182
    GTE  shift, and go to state 183
    LT   shift, and go to state 184
    LTE  shift, and go to state 185
    NEQ  shift, and go to state 186
    EQ   shift, and go to state 187


State 115

   97 statement: GOTO label â¢

    $default  reduce using rule 97 (statement)


State 116

   16 block5: BEGIN_TOK statement_list END â¢

    $default  reduce using rule 16 (block5)


State 117

   83 statement_list: statement_list SEMICOLON â¢ optional_statement

    BEGIN_TOK        shift, and go to state 56
    IF               shift, and go to state 57
    WITH             shift, and go to state 58
    WHILE            shift, and go to state 59
    FOR              shift, and go to state 60
    REPEAT           shift, and go to state 61
    CASE             shift, and go to state 62
    GOTO             shift, and go to state 63
    READ             shift, and go to state 47
    WRITE            shift, and go to state 48
    READLN           shift, and go to state 49
    WRITELN          shift, and go to state 50
    INTEGER_LITERAL  shift, and go to state 45
    IDENTIFIER       shift, and go to state 8

    $default  reduce using rule 184 (empty)

    optional_statement  go to state 204
    statement           go to state 205
    variable            go to state 66
    label               go to state 67
    procid              go to state 68
    varid               go to state 69
    identifier          go to state 70
    unsigned_integer    go to state 71
    empty               go to state 206


State 118

  102 variable: variable DOT â¢ fieldid

    IDENTIFIER  shift, and go to state 8

    fieldid     go to state 207
    identifier  go to state 208


State 119

  103 variable: variable CARET â¢

    $default  reduce using rule 103 (variable)


State 120

   86 statement: variable ASSIGN â¢ expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    expression                 go to state 209
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 121

  101 variable: variable L_BRACKET â¢ subscript_list R_BRACKET

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    subscript_list             go to state 210
    expression                 go to state 211
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 122

   99 statement: label COLON â¢ statement

    BEGIN_TOK        shift, and go to state 56
    IF               shift, and go to state 57
    WITH             shift, and go to state 58
    WHILE            shift, and go to state 59
    FOR              shift, and go to state 60
    REPEAT           shift, and go to state 61
    CASE             shift, and go to state 62
    GOTO             shift, and go to state 63
    READ             shift, and go to state 47
    WRITE            shift, and go to state 48
    READLN           shift, and go to state 49
    WRITELN          shift, and go to state 50
    INTEGER_LITERAL  shift, and go to state 45
    IDENTIFIER       shift, and go to state 8

    statement         go to state 212
    variable          go to state 66
    label             go to state 67
    procid            go to state 68
    varid             go to state 69
    identifier        go to state 70
    unsigned_integer  go to state 71


State 123

   96 statement: procid L_PAREN â¢ optional_expression_list R_PAREN

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    $default  reduce using rule 184 (empty)

    variable                   go to state 96
    optional_expression_list   go to state 213
    expression_list            go to state 214
    expression                 go to state 215
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107
    empty                      go to state 216


State 124

    7 block: label_declaration SEMICOLON block1 â¢

    $default  reduce using rule 7 (block)


State 125

   18 label_declaration: label_declaration COMMA unsigned_integer â¢

    $default  reduce using rule 18 (label_declaration)


State 126

    9 block1: constant_declaration SEMICOLON block2 â¢

    $default  reduce using rule 9 (block1)


State 127

   20 constant_declaration: constant_declaration SEMICOLON constid â¢ EQ constant

    EQ  shift, and go to state 217


State 128

   11 block2: type_declaration SEMICOLON block3 â¢

    $default  reduce using rule 11 (block2)


State 129

   22 type_declaration: type_declaration SEMICOLON typeid â¢ EQ type

    EQ  shift, and go to state 218


State 130

   13 block3: variable_declaration SEMICOLON block4 â¢

    $default  reduce using rule 13 (block3)


State 131

   24 variable_declaration: variable_declaration SEMICOLON variableid_list â¢ COLON type
   26 variableid_list: variableid_list â¢ COMMA identifier

    COMMA  shift, and go to state 79
    COLON  shift, and go to state 219


State 132

   15 block4: proc_and_func_declaration SEMICOLON block5 â¢

    $default  reduce using rule 15 (block4)


State 133

   68 proc_and_func_declaration: proc_and_func_declaration SEMICOLON proc_or_func â¢

    $default  reduce using rule 68 (proc_and_func_declaration)


State 134

   26 variableid_list: variableid_list COMMA identifier â¢

    $default  reduce using rule 26 (variableid_list)


State 135

   42 structured_type: PACKED â¢ unpacked_structured_type

    ARRAY     shift, and go to state 136
    RECORD    shift, and go to state 137
    SET       shift, and go to state 138
    FILE_TOK  shift, and go to state 139

    unpacked_structured_type  go to state 220


State 136

   43 unpacked_structured_type: ARRAY â¢ L_BRACKET index_list R_BRACKET OF type

    L_BRACKET  shift, and go to state 221


State 137

   44 unpacked_structured_type: RECORD â¢ field_list END

    CASE        shift, and go to state 222
    IDENTIFIER  shift, and go to state 8

    $default  reduce using rule 184 (empty)

    field_list    go to state 223
    fixed_part    go to state 224
    record_field  go to state 225
    fieldid_list  go to state 226
    variant_part  go to state 227
    fieldid       go to state 228
    identifier    go to state 208
    empty         go to state 229


State 138

   45 unpacked_structured_type: SET â¢ OF simple_type

    OF  shift, and go to state 230


State 139

   46 unpacked_structured_type: FILE_TOK â¢
   47                         | FILE_TOK â¢ OF type

    OF  shift, and go to state 231

    $default  reduce using rule 46 (unpacked_structured_type)


State 140

   33 constant: PLUS â¢ constid

    IDENTIFIER  shift, and go to state 8

    constid     go to state 232
    identifier  go to state 37


State 141

   34 constant: MINUS â¢ constid

    IDENTIFIER  shift, and go to state 8

    constid     go to state 233
    identifier  go to state 37


State 142

   37 type: CARET â¢ typeid

    INTEGER     shift, and go to state 38
    REAL        shift, and go to state 39
    BOOLEAN     shift, and go to state 40
    CHAR        shift, and go to state 41
    STRING      shift, and go to state 42
    IDENTIFIER  shift, and go to state 8

    typeid      go to state 234
    identifier  go to state 44


State 143

   38 simple_type: L_PAREN â¢ identifier_list R_PAREN

    IDENTIFIER  shift, and go to state 8

    identifier_list  go to state 235
    identifier       go to state 10


State 144

  179 integer_literal: INTEGER_LITERAL â¢

    $default  reduce using rule 179 (integer_literal)


State 145

  180 real_literal: REAL_LITERAL â¢

    $default  reduce using rule 180 (real_literal)


State 146

  183 boolean_literal: BOOLEAN_LITERAL â¢

    $default  reduce using rule 183 (boolean_literal)


State 147

   39 simple_type: constant â¢ DOTDOT constant

    DOTDOT  shift, and go to state 236


State 148

   23 variable_declaration: VAR variableid_list COLON type â¢

    $default  reduce using rule 23 (variable_declaration)


State 149

   35 type: simple_type â¢

    $default  reduce using rule 35 (type)


State 150

   36 type: structured_type â¢

    $default  reduce using rule 36 (type)


State 151

   41 structured_type: unpacked_structured_type â¢

    $default  reduce using rule 41 (structured_type)


State 152

   32 constant: constid â¢

    $default  reduce using rule 32 (constant)


State 153

   40 simple_type: typeid â¢

    $default  reduce using rule 40 (simple_type)


State 154

  160 constid: identifier â¢
  166 typeid: identifier â¢

    DOTDOT    reduce using rule 160 (constid)
    $default  reduce using rule 166 (typeid)


State 155

   27 constant: integer_literal â¢

    $default  reduce using rule 27 (constant)


State 156

   28 constant: real_literal â¢

    $default  reduce using rule 28 (constant)


State 157

   29 constant: string_literal â¢

    $default  reduce using rule 29 (constant)


State 158

   30 constant: char_literal â¢

    $default  reduce using rule 30 (constant)


State 159

   31 constant: boolean_literal â¢

    $default  reduce using rule 31 (constant)


State 160

   19 constant_declaration: CONST constid EQ constant â¢

    $default  reduce using rule 19 (constant_declaration)


State 161

   21 type_declaration: TYPE typeid EQ type â¢

    $default  reduce using rule 21 (type_declaration)


State 162

   77 formal_parameter_section: VAR â¢ parameterid_list COLON typeid

    IDENTIFIER  shift, and go to state 8

    parameterid_list  go to state 237
    identifier        go to state 168


State 163

   78 formal_parameter_section: PROCEDURE â¢ identifier parameters

    IDENTIFIER  shift, and go to state 8

    identifier  go to state 238


State 164

   79 formal_parameter_section: FUNCTION â¢ identifier parameters COLON typeid

    IDENTIFIER  shift, and go to state 8

    identifier  go to state 239


State 165

   73 parameters: L_PAREN formal_parameter_list â¢ R_PAREN
   75 formal_parameter_list: formal_parameter_list â¢ SEMICOLON formal_parameter_section

    SEMICOLON  shift, and go to state 240
    R_PAREN    shift, and go to state 241


State 166

   74 formal_parameter_list: formal_parameter_section â¢

    $default  reduce using rule 74 (formal_parameter_list)


State 167

   76 formal_parameter_section: parameterid_list â¢ COLON typeid
   81 parameterid_list: parameterid_list â¢ COMMA identifier

    COMMA  shift, and go to state 242
    COLON  shift, and go to state 243


State 168

   80 parameterid_list: identifier â¢

    $default  reduce using rule 80 (parameterid_list)


State 169

   69 proc_or_func: PROCEDURE procid parameters SEMICOLON â¢ block_or_forward

    VAR        shift, and go to state 14
    CONST      shift, and go to state 15
    TYPE       shift, and go to state 16
    LABEL      shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    FUNCTION   shift, and go to state 19
    BEGIN_TOK  shift, and go to state 20
    FORWARD    shift, and go to state 244

    block                      go to state 245
    block1                     go to state 22
    block2                     go to state 23
    block3                     go to state 24
    block4                     go to state 25
    block5                     go to state 26
    label_declaration          go to state 27
    constant_declaration       go to state 28
    type_declaration           go to state 29
    variable_declaration       go to state 30
    proc_and_func_declaration  go to state 31
    proc_or_func               go to state 32
    block_or_forward           go to state 246


State 170

   70 proc_or_func: FUNCTION funcid parameters COLON â¢ typeid SEMICOLON block_or_forward

    INTEGER     shift, and go to state 38
    REAL        shift, and go to state 39
    BOOLEAN     shift, and go to state 40
    CHAR        shift, and go to state 41
    STRING      shift, and go to state 42
    IDENTIFIER  shift, and go to state 8

    typeid      go to state 247
    identifier  go to state 44


State 171

   87 statement: BEGIN_TOK statement_list END â¢

    $default  reduce using rule 87 (statement)


State 172

  143 unary_expression: NOT unary_expression â¢

    $default  reduce using rule 143 (unary_expression)


State 173

  141 unary_expression: PLUS unary_expression â¢

    $default  reduce using rule 141 (unary_expression)


State 174

  142 unary_expression: MINUS unary_expression â¢

    $default  reduce using rule 142 (unary_expression)


State 175

  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression
  153 primary_expression: L_PAREN expression â¢ R_PAREN

    GT       shift, and go to state 182
    GTE      shift, and go to state 183
    LT       shift, and go to state 184
    LTE      shift, and go to state 185
    NEQ      shift, and go to state 186
    EQ       shift, and go to state 187
    R_PAREN  shift, and go to state 248


State 176

  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression
  158 element: expression â¢
  159        | expression â¢ DOTDOT expression

    GT      shift, and go to state 182
    GTE     shift, and go to state 183
    LT      shift, and go to state 184
    LTE     shift, and go to state 185
    NEQ     shift, and go to state 186
    EQ      shift, and go to state 187
    DOTDOT  shift, and go to state 249

    $default  reduce using rule 158 (element)


State 177

  152 primary_expression: L_BRACKET element_list â¢ R_BRACKET

    R_BRACKET  shift, and go to state 250


State 178

  155 element_list: element_list_non_empty â¢
  157 element_list_non_empty: element_list_non_empty â¢ COMMA element

    COMMA  shift, and go to state 251

    $default  reduce using rule 155 (element_list)


State 179

  156 element_list_non_empty: element â¢

    $default  reduce using rule 156 (element_list_non_empty)


State 180

  154 element_list: empty â¢

    $default  reduce using rule 154 (element_list)


State 181

   88 statement: IF expression THEN â¢ statement
   89          | IF expression THEN â¢ statement ELSE statement

    BEGIN_TOK        shift, and go to state 56
    IF               shift, and go to state 57
    WITH             shift, and go to state 58
    WHILE            shift, and go to state 59
    FOR              shift, and go to state 60
    REPEAT           shift, and go to state 61
    CASE             shift, and go to state 62
    GOTO             shift, and go to state 63
    READ             shift, and go to state 47
    WRITE            shift, and go to state 48
    READLN           shift, and go to state 49
    WRITELN          shift, and go to state 50
    INTEGER_LITERAL  shift, and go to state 45
    IDENTIFIER       shift, and go to state 8

    statement         go to state 252
    variable          go to state 66
    label             go to state 67
    procid            go to state 68
    varid             go to state 69
    identifier        go to state 70
    unsigned_integer  go to state 71


State 182

  128 expression: expression GT â¢ additive_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    additive_expression        go to state 253
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 183

  127 expression: expression GTE â¢ additive_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    additive_expression        go to state 254
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 184

  123 expression: expression LT â¢ additive_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    additive_expression        go to state 255
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 185

  124 expression: expression LTE â¢ additive_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    additive_expression        go to state 256
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 186

  126 expression: expression NEQ â¢ additive_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    additive_expression        go to state 257
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 187

  125 expression: expression EQ â¢ additive_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    additive_expression        go to state 258
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 188

  132 additive_expression: additive_expression OR â¢ multiplicative_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    multiplicative_expression  go to state 259
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 189

  130 additive_expression: additive_expression PLUS â¢ multiplicative_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    multiplicative_expression  go to state 260
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 190

  131 additive_expression: additive_expression MINUS â¢ multiplicative_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    multiplicative_expression  go to state 261
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 191

  138 multiplicative_expression: multiplicative_expression AND â¢ unary_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable            go to state 96
    unary_expression    go to state 262
    primary_expression  go to state 101
    funcid              go to state 102
    varid               go to state 69
    identifier          go to state 103
    unsigned_integer    go to state 104
    unsigned_real       go to state 105
    string_literal      go to state 106
    char_literal        go to state 107


State 192

  134 multiplicative_expression: multiplicative_expression TIMES â¢ unary_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable            go to state 96
    unary_expression    go to state 263
    primary_expression  go to state 101
    funcid              go to state 102
    varid               go to state 69
    identifier          go to state 103
    unsigned_integer    go to state 104
    unsigned_real       go to state 105
    string_literal      go to state 106
    char_literal        go to state 107


State 193

  135 multiplicative_expression: multiplicative_expression DIVIDE â¢ unary_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable            go to state 96
    unary_expression    go to state 264
    primary_expression  go to state 101
    funcid              go to state 102
    varid               go to state 69
    identifier          go to state 103
    unsigned_integer    go to state 104
    unsigned_real       go to state 105
    string_literal      go to state 106
    char_literal        go to state 107


State 194

  136 multiplicative_expression: multiplicative_expression DIV â¢ unary_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable            go to state 96
    unary_expression    go to state 265
    primary_expression  go to state 101
    funcid              go to state 102
    varid               go to state 69
    identifier          go to state 103
    unsigned_integer    go to state 104
    unsigned_real       go to state 105
    string_literal      go to state 106
    char_literal        go to state 107


State 195

  137 multiplicative_expression: multiplicative_expression MOD â¢ unary_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable            go to state 96
    unary_expression    go to state 266
    primary_expression  go to state 101
    funcid              go to state 102
    varid               go to state 69
    identifier          go to state 103
    unsigned_integer    go to state 104
    unsigned_real       go to state 105
    string_literal      go to state 106
    char_literal        go to state 107


State 196

  139 multiplicative_expression: multiplicative_expression IN â¢ unary_expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable            go to state 96
    unary_expression    go to state 267
    primary_expression  go to state 101
    funcid              go to state 102
    varid               go to state 69
    identifier          go to state 103
    unsigned_integer    go to state 104
    unsigned_real       go to state 105
    string_literal      go to state 106
    char_literal        go to state 107


State 197

  151 primary_expression: funcid L_PAREN â¢ optional_expression_list R_PAREN

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    $default  reduce using rule 184 (empty)

    variable                   go to state 96
    optional_expression_list   go to state 268
    expression_list            go to state 214
    expression                 go to state 215
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107
    empty                      go to state 216


State 198

   98 statement: WITH record_variable_list DO â¢ statement

    BEGIN_TOK        shift, and go to state 56
    IF               shift, and go to state 57
    WITH             shift, and go to state 58
    WHILE            shift, and go to state 59
    FOR              shift, and go to state 60
    REPEAT           shift, and go to state 61
    CASE             shift, and go to state 62
    GOTO             shift, and go to state 63
    READ             shift, and go to state 47
    WRITE            shift, and go to state 48
    READLN           shift, and go to state 49
    WRITELN          shift, and go to state 50
    INTEGER_LITERAL  shift, and go to state 45
    IDENTIFIER       shift, and go to state 8

    statement         go to state 269
    variable          go to state 66
    label             go to state 67
    procid            go to state 68
    varid             go to state 69
    identifier        go to state 70
    unsigned_integer  go to state 71


State 199

  122 record_variable_list: record_variable_list COMMA â¢ variable

    IDENTIFIER  shift, and go to state 8

    variable    go to state 270
    varid       go to state 69
    identifier  go to state 110


State 200

   92 statement: WHILE expression DO â¢ statement

    BEGIN_TOK        shift, and go to state 56
    IF               shift, and go to state 57
    WITH             shift, and go to state 58
    WHILE            shift, and go to state 59
    FOR              shift, and go to state 60
    REPEAT           shift, and go to state 61
    CASE             shift, and go to state 62
    GOTO             shift, and go to state 63
    READ             shift, and go to state 47
    WRITE            shift, and go to state 48
    READLN           shift, and go to state 49
    WRITELN          shift, and go to state 50
    INTEGER_LITERAL  shift, and go to state 45
    IDENTIFIER       shift, and go to state 8

    statement         go to state 271
    variable          go to state 66
    label             go to state 67
    procid            go to state 68
    varid             go to state 69
    identifier        go to state 70
    unsigned_integer  go to state 71


State 201

   94 statement: FOR varid ASSIGN â¢ for_list DO statement

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    for_list                   go to state 272
    expression                 go to state 273
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 202

   93 statement: REPEAT statement_list UNTIL â¢ expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    expression                 go to state 274
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 203

   90 statement: CASE expression OF â¢ case_list END
   91          | CASE expression OF â¢ case_list SEMICOLON case_else END

    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant         go to state 275
    case_list        go to state 276
    case_item        go to state 277
    case_label_list  go to state 278
    case_label       go to state 279
    constid          go to state 152
    identifier       go to state 37
    integer_literal  go to state 155
    real_literal     go to state 156
    string_literal   go to state 157
    char_literal     go to state 158
    boolean_literal  go to state 159


State 204

   83 statement_list: statement_list SEMICOLON optional_statement â¢

    $default  reduce using rule 83 (statement_list)


State 205

   84 optional_statement: statement â¢

    $default  reduce using rule 84 (optional_statement)


State 206

   85 optional_statement: empty â¢

    $default  reduce using rule 85 (optional_statement)


State 207

  102 variable: variable DOT fieldid â¢

    $default  reduce using rule 102 (variable)


State 208

  174 fieldid: identifier â¢

    $default  reduce using rule 174 (fieldid)


State 209

   86 statement: variable ASSIGN expression â¢
  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression

    GT   shift, and go to state 182
    GTE  shift, and go to state 183
    LT   shift, and go to state 184
    LTE  shift, and go to state 185
    NEQ  shift, and go to state 186
    EQ   shift, and go to state 187

    $default  reduce using rule 86 (statement)


State 210

  101 variable: variable L_BRACKET subscript_list â¢ R_BRACKET
  105 subscript_list: subscript_list â¢ COMMA expression

    COMMA      shift, and go to state 280
    R_BRACKET  shift, and go to state 281


State 211

  104 subscript_list: expression â¢
  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression

    GT   shift, and go to state 182
    GTE  shift, and go to state 183
    LT   shift, and go to state 184
    LTE  shift, and go to state 185
    NEQ  shift, and go to state 186
    EQ   shift, and go to state 187

    $default  reduce using rule 104 (subscript_list)


State 212

   99 statement: label COLON statement â¢

    $default  reduce using rule 99 (statement)


State 213

   96 statement: procid L_PAREN optional_expression_list â¢ R_PAREN

    R_PAREN  shift, and go to state 282


State 214

  117 optional_expression_list: expression_list â¢
  119 expression_list: expression_list â¢ COMMA expression

    COMMA  shift, and go to state 283

    $default  reduce using rule 117 (optional_expression_list)


State 215

  118 expression_list: expression â¢
  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression

    GT   shift, and go to state 182
    GTE  shift, and go to state 183
    LT   shift, and go to state 184
    LTE  shift, and go to state 185
    NEQ  shift, and go to state 186
    EQ   shift, and go to state 187

    $default  reduce using rule 118 (expression_list)


State 216

  116 optional_expression_list: empty â¢

    $default  reduce using rule 116 (optional_expression_list)


State 217

   20 constant_declaration: constant_declaration SEMICOLON constid EQ â¢ constant

    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant         go to state 284
    constid          go to state 152
    identifier       go to state 37
    integer_literal  go to state 155
    real_literal     go to state 156
    string_literal   go to state 157
    char_literal     go to state 158
    boolean_literal  go to state 159


State 218

   22 type_declaration: type_declaration SEMICOLON typeid EQ â¢ type

    PACKED           shift, and go to state 135
    INTEGER          shift, and go to state 38
    REAL             shift, and go to state 39
    BOOLEAN          shift, and go to state 40
    CHAR             shift, and go to state 41
    ARRAY            shift, and go to state 136
    RECORD           shift, and go to state 137
    SET              shift, and go to state 138
    FILE_TOK         shift, and go to state 139
    STRING           shift, and go to state 42
    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CARET            shift, and go to state 142
    L_PAREN          shift, and go to state 143
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant                  go to state 147
    type                      go to state 285
    simple_type               go to state 149
    structured_type           go to state 150
    unpacked_structured_type  go to state 151
    constid                   go to state 152
    typeid                    go to state 153
    identifier                go to state 154
    integer_literal           go to state 155
    real_literal              go to state 156
    string_literal            go to state 157
    char_literal              go to state 158
    boolean_literal           go to state 159


State 219

   24 variable_declaration: variable_declaration SEMICOLON variableid_list COLON â¢ type

    PACKED           shift, and go to state 135
    INTEGER          shift, and go to state 38
    REAL             shift, and go to state 39
    BOOLEAN          shift, and go to state 40
    CHAR             shift, and go to state 41
    ARRAY            shift, and go to state 136
    RECORD           shift, and go to state 137
    SET              shift, and go to state 138
    FILE_TOK         shift, and go to state 139
    STRING           shift, and go to state 42
    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CARET            shift, and go to state 142
    L_PAREN          shift, and go to state 143
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant                  go to state 147
    type                      go to state 286
    simple_type               go to state 149
    structured_type           go to state 150
    unpacked_structured_type  go to state 151
    constid                   go to state 152
    typeid                    go to state 153
    identifier                go to state 154
    integer_literal           go to state 155
    real_literal              go to state 156
    string_literal            go to state 157
    char_literal              go to state 158
    boolean_literal           go to state 159


State 220

   42 structured_type: PACKED unpacked_structured_type â¢

    $default  reduce using rule 42 (structured_type)


State 221

   43 unpacked_structured_type: ARRAY L_BRACKET â¢ index_list R_BRACKET OF type

    INTEGER          shift, and go to state 38
    REAL             shift, and go to state 39
    BOOLEAN          shift, and go to state 40
    CHAR             shift, and go to state 41
    STRING           shift, and go to state 42
    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    L_PAREN          shift, and go to state 143
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant         go to state 147
    simple_type      go to state 287
    index_list       go to state 288
    constid          go to state 152
    typeid           go to state 153
    identifier       go to state 154
    integer_literal  go to state 155
    real_literal     go to state 156
    string_literal   go to state 157
    char_literal     go to state 158
    boolean_literal  go to state 159


State 222

   60 variant_part: CASE â¢ tag_field OF variant_list

    INTEGER     shift, and go to state 38
    REAL        shift, and go to state 39
    BOOLEAN     shift, and go to state 40
    CHAR        shift, and go to state 41
    STRING      shift, and go to state 42
    IDENTIFIER  shift, and go to state 8

    tag_field   go to state 289
    typeid      go to state 290
    identifier  go to state 291


State 223

   44 unpacked_structured_type: RECORD field_list â¢ END

    END  shift, and go to state 292


State 224

   50 field_list: fixed_part â¢
   51           | fixed_part â¢ SEMICOLON variant_part
   55 fixed_part: fixed_part â¢ SEMICOLON record_field

    SEMICOLON  shift, and go to state 293

    $default  reduce using rule 50 (field_list)


State 225

   54 fixed_part: record_field â¢

    $default  reduce using rule 54 (fixed_part)


State 226

   57 record_field: fieldid_list â¢ COLON type
   59 fieldid_list: fieldid_list â¢ COMMA fieldid

    COMMA  shift, and go to state 294
    COLON  shift, and go to state 295


State 227

   52 field_list: variant_part â¢

    $default  reduce using rule 52 (field_list)


State 228

   58 fieldid_list: fieldid â¢

    $default  reduce using rule 58 (fieldid_list)


State 229

   53 field_list: empty â¢
   56 record_field: empty â¢

    END        reduce using rule 53 (field_list)
    END        [reduce using rule 56 (record_field)]
    SEMICOLON  reduce using rule 56 (record_field)
    R_PAREN    reduce using rule 53 (field_list)
    R_PAREN    [reduce using rule 56 (record_field)]
    $default   reduce using rule 53 (field_list)

    reduce/reduce conflict on tokens END, R_PAREN:
       53 field_list: empty â¢
       56 record_field: empty â¢
      Example: empty â¢
      First reduce derivation
        field_list
        â³ 53: empty â¢
      Second reduce derivation
        field_list
        â³ 50: fixed_part
              â³ 54: record_field
                    â³ 56: empty â¢



State 230

   45 unpacked_structured_type: SET OF â¢ simple_type

    INTEGER          shift, and go to state 38
    REAL             shift, and go to state 39
    BOOLEAN          shift, and go to state 40
    CHAR             shift, and go to state 41
    STRING           shift, and go to state 42
    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    L_PAREN          shift, and go to state 143
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant         go to state 147
    simple_type      go to state 296
    constid          go to state 152
    typeid           go to state 153
    identifier       go to state 154
    integer_literal  go to state 155
    real_literal     go to state 156
    string_literal   go to state 157
    char_literal     go to state 158
    boolean_literal  go to state 159


State 231

   47 unpacked_structured_type: FILE_TOK OF â¢ type

    PACKED           shift, and go to state 135
    INTEGER          shift, and go to state 38
    REAL             shift, and go to state 39
    BOOLEAN          shift, and go to state 40
    CHAR             shift, and go to state 41
    ARRAY            shift, and go to state 136
    RECORD           shift, and go to state 137
    SET              shift, and go to state 138
    FILE_TOK         shift, and go to state 139
    STRING           shift, and go to state 42
    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CARET            shift, and go to state 142
    L_PAREN          shift, and go to state 143
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant                  go to state 147
    type                      go to state 297
    simple_type               go to state 149
    structured_type           go to state 150
    unpacked_structured_type  go to state 151
    constid                   go to state 152
    typeid                    go to state 153
    identifier                go to state 154
    integer_literal           go to state 155
    real_literal              go to state 156
    string_literal            go to state 157
    char_literal              go to state 158
    boolean_literal           go to state 159


State 232

   33 constant: PLUS constid â¢

    $default  reduce using rule 33 (constant)


State 233

   34 constant: MINUS constid â¢

    $default  reduce using rule 34 (constant)


State 234

   37 type: CARET typeid â¢

    $default  reduce using rule 37 (type)


State 235

    5 identifier_list: identifier_list â¢ COMMA identifier
   38 simple_type: L_PAREN identifier_list â¢ R_PAREN

    COMMA    shift, and go to state 12
    R_PAREN  shift, and go to state 298


State 236

   39 simple_type: constant DOTDOT â¢ constant

    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant         go to state 299
    constid          go to state 152
    identifier       go to state 37
    integer_literal  go to state 155
    real_literal     go to state 156
    string_literal   go to state 157
    char_literal     go to state 158
    boolean_literal  go to state 159


State 237

   77 formal_parameter_section: VAR parameterid_list â¢ COLON typeid
   81 parameterid_list: parameterid_list â¢ COMMA identifier

    COMMA  shift, and go to state 242
    COLON  shift, and go to state 300


State 238

   78 formal_parameter_section: PROCEDURE identifier â¢ parameters

    L_PAREN  shift, and go to state 83

    parameters  go to state 301


State 239

   79 formal_parameter_section: FUNCTION identifier â¢ parameters COLON typeid

    L_PAREN  shift, and go to state 83

    parameters  go to state 302


State 240

   75 formal_parameter_list: formal_parameter_list SEMICOLON â¢ formal_parameter_section

    VAR         shift, and go to state 162
    PROCEDURE   shift, and go to state 163
    FUNCTION    shift, and go to state 164
    IDENTIFIER  shift, and go to state 8

    formal_parameter_section  go to state 303
    parameterid_list          go to state 167
    identifier                go to state 168


State 241

   73 parameters: L_PAREN formal_parameter_list R_PAREN â¢

    $default  reduce using rule 73 (parameters)


State 242

   81 parameterid_list: parameterid_list COMMA â¢ identifier

    IDENTIFIER  shift, and go to state 8

    identifier  go to state 304


State 243

   76 formal_parameter_section: parameterid_list COLON â¢ typeid

    INTEGER     shift, and go to state 38
    REAL        shift, and go to state 39
    BOOLEAN     shift, and go to state 40
    CHAR        shift, and go to state 41
    STRING      shift, and go to state 42
    IDENTIFIER  shift, and go to state 8

    typeid      go to state 305
    identifier  go to state 44


State 244

   72 block_or_forward: FORWARD â¢

    $default  reduce using rule 72 (block_or_forward)


State 245

   71 block_or_forward: block â¢

    $default  reduce using rule 71 (block_or_forward)


State 246

   69 proc_or_func: PROCEDURE procid parameters SEMICOLON block_or_forward â¢

    $default  reduce using rule 69 (proc_or_func)


State 247

   70 proc_or_func: FUNCTION funcid parameters COLON typeid â¢ SEMICOLON block_or_forward

    SEMICOLON  shift, and go to state 306


State 248

  153 primary_expression: L_PAREN expression R_PAREN â¢

    $default  reduce using rule 153 (primary_expression)


State 249

  159 element: expression DOTDOT â¢ expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    expression                 go to state 307
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 250

  152 primary_expression: L_BRACKET element_list R_BRACKET â¢

    $default  reduce using rule 152 (primary_expression)


State 251

  157 element_list_non_empty: element_list_non_empty COMMA â¢ element

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    expression                 go to state 176
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    element                    go to state 308
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 252

   88 statement: IF expression THEN statement â¢
   89          | IF expression THEN statement â¢ ELSE statement

    ELSE  shift, and go to state 309

    $default  reduce using rule 88 (statement)


State 253

  128 expression: expression GT additive_expression â¢
  130 additive_expression: additive_expression â¢ PLUS multiplicative_expression
  131                    | additive_expression â¢ MINUS multiplicative_expression
  132                    | additive_expression â¢ OR multiplicative_expression

    OR     shift, and go to state 188
    PLUS   shift, and go to state 189
    MINUS  shift, and go to state 190

    $default  reduce using rule 128 (expression)


State 254

  127 expression: expression GTE additive_expression â¢
  130 additive_expression: additive_expression â¢ PLUS multiplicative_expression
  131                    | additive_expression â¢ MINUS multiplicative_expression
  132                    | additive_expression â¢ OR multiplicative_expression

    OR     shift, and go to state 188
    PLUS   shift, and go to state 189
    MINUS  shift, and go to state 190

    $default  reduce using rule 127 (expression)


State 255

  123 expression: expression LT additive_expression â¢
  130 additive_expression: additive_expression â¢ PLUS multiplicative_expression
  131                    | additive_expression â¢ MINUS multiplicative_expression
  132                    | additive_expression â¢ OR multiplicative_expression

    OR     shift, and go to state 188
    PLUS   shift, and go to state 189
    MINUS  shift, and go to state 190

    $default  reduce using rule 123 (expression)


State 256

  124 expression: expression LTE additive_expression â¢
  130 additive_expression: additive_expression â¢ PLUS multiplicative_expression
  131                    | additive_expression â¢ MINUS multiplicative_expression
  132                    | additive_expression â¢ OR multiplicative_expression

    OR     shift, and go to state 188
    PLUS   shift, and go to state 189
    MINUS  shift, and go to state 190

    $default  reduce using rule 124 (expression)


State 257

  126 expression: expression NEQ additive_expression â¢
  130 additive_expression: additive_expression â¢ PLUS multiplicative_expression
  131                    | additive_expression â¢ MINUS multiplicative_expression
  132                    | additive_expression â¢ OR multiplicative_expression

    OR     shift, and go to state 188
    PLUS   shift, and go to state 189
    MINUS  shift, and go to state 190

    $default  reduce using rule 126 (expression)


State 258

  125 expression: expression EQ additive_expression â¢
  130 additive_expression: additive_expression â¢ PLUS multiplicative_expression
  131                    | additive_expression â¢ MINUS multiplicative_expression
  132                    | additive_expression â¢ OR multiplicative_expression

    OR     shift, and go to state 188
    PLUS   shift, and go to state 189
    MINUS  shift, and go to state 190

    $default  reduce using rule 125 (expression)


State 259

  132 additive_expression: additive_expression OR multiplicative_expression â¢
  134 multiplicative_expression: multiplicative_expression â¢ TIMES unary_expression
  135                          | multiplicative_expression â¢ DIVIDE unary_expression
  136                          | multiplicative_expression â¢ DIV unary_expression
  137                          | multiplicative_expression â¢ MOD unary_expression
  138                          | multiplicative_expression â¢ AND unary_expression
  139                          | multiplicative_expression â¢ IN unary_expression

    AND     shift, and go to state 191
    TIMES   shift, and go to state 192
    DIVIDE  shift, and go to state 193
    DIV     shift, and go to state 194
    MOD     shift, and go to state 195
    IN      shift, and go to state 196

    $default  reduce using rule 132 (additive_expression)


State 260

  130 additive_expression: additive_expression PLUS multiplicative_expression â¢
  134 multiplicative_expression: multiplicative_expression â¢ TIMES unary_expression
  135                          | multiplicative_expression â¢ DIVIDE unary_expression
  136                          | multiplicative_expression â¢ DIV unary_expression
  137                          | multiplicative_expression â¢ MOD unary_expression
  138                          | multiplicative_expression â¢ AND unary_expression
  139                          | multiplicative_expression â¢ IN unary_expression

    AND     shift, and go to state 191
    TIMES   shift, and go to state 192
    DIVIDE  shift, and go to state 193
    DIV     shift, and go to state 194
    MOD     shift, and go to state 195
    IN      shift, and go to state 196

    $default  reduce using rule 130 (additive_expression)


State 261

  131 additive_expression: additive_expression MINUS multiplicative_expression â¢
  134 multiplicative_expression: multiplicative_expression â¢ TIMES unary_expression
  135                          | multiplicative_expression â¢ DIVIDE unary_expression
  136                          | multiplicative_expression â¢ DIV unary_expression
  137                          | multiplicative_expression â¢ MOD unary_expression
  138                          | multiplicative_expression â¢ AND unary_expression
  139                          | multiplicative_expression â¢ IN unary_expression

    AND     shift, and go to state 191
    TIMES   shift, and go to state 192
    DIVIDE  shift, and go to state 193
    DIV     shift, and go to state 194
    MOD     shift, and go to state 195
    IN      shift, and go to state 196

    $default  reduce using rule 131 (additive_expression)


State 262

  138 multiplicative_expression: multiplicative_expression AND unary_expression â¢

    $default  reduce using rule 138 (multiplicative_expression)


State 263

  134 multiplicative_expression: multiplicative_expression TIMES unary_expression â¢

    $default  reduce using rule 134 (multiplicative_expression)


State 264

  135 multiplicative_expression: multiplicative_expression DIVIDE unary_expression â¢

    $default  reduce using rule 135 (multiplicative_expression)


State 265

  136 multiplicative_expression: multiplicative_expression DIV unary_expression â¢

    $default  reduce using rule 136 (multiplicative_expression)


State 266

  137 multiplicative_expression: multiplicative_expression MOD unary_expression â¢

    $default  reduce using rule 137 (multiplicative_expression)


State 267

  139 multiplicative_expression: multiplicative_expression IN unary_expression â¢

    $default  reduce using rule 139 (multiplicative_expression)


State 268

  151 primary_expression: funcid L_PAREN optional_expression_list â¢ R_PAREN

    R_PAREN  shift, and go to state 310


State 269

   98 statement: WITH record_variable_list DO statement â¢

    $default  reduce using rule 98 (statement)


State 270

  101 variable: variable â¢ L_BRACKET subscript_list R_BRACKET
  102         | variable â¢ DOT fieldid
  103         | variable â¢ CARET
  122 record_variable_list: record_variable_list COMMA variable â¢

    DOT        shift, and go to state 118
    CARET      shift, and go to state 119
    L_BRACKET  shift, and go to state 121

    $default  reduce using rule 122 (record_variable_list)


State 271

   92 statement: WHILE expression DO statement â¢

    $default  reduce using rule 92 (statement)


State 272

   94 statement: FOR varid ASSIGN for_list â¢ DO statement

    DO  shift, and go to state 311


State 273

  114 for_list: expression â¢ TO expression
  115         | expression â¢ DOWNTO expression
  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression

    TO      shift, and go to state 312
    DOWNTO  shift, and go to state 313
    GT      shift, and go to state 182
    GTE     shift, and go to state 183
    LT      shift, and go to state 184
    LTE     shift, and go to state 185
    NEQ     shift, and go to state 186
    EQ      shift, and go to state 187


State 274

   93 statement: REPEAT statement_list UNTIL expression â¢
  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression

    GT   shift, and go to state 182
    GTE  shift, and go to state 183
    LT   shift, and go to state 184
    LTE  shift, and go to state 185
    NEQ  shift, and go to state 186
    EQ   shift, and go to state 187

    $default  reduce using rule 93 (statement)


State 275

  111 case_label: constant â¢
  112           | constant â¢ DOTDOT constant

    DOTDOT  shift, and go to state 314

    $default  reduce using rule 111 (case_label)


State 276

   90 statement: CASE expression OF case_list â¢ END
   91          | CASE expression OF case_list â¢ SEMICOLON case_else END
  107 case_list: case_list â¢ SEMICOLON case_item

    END        shift, and go to state 315
    SEMICOLON  shift, and go to state 316


State 277

  106 case_list: case_item â¢

    $default  reduce using rule 106 (case_list)


State 278

  108 case_item: case_label_list â¢ COLON statement
  110 case_label_list: case_label_list â¢ COMMA case_label

    COMMA  shift, and go to state 317
    COLON  shift, and go to state 318


State 279

  109 case_label_list: case_label â¢

    $default  reduce using rule 109 (case_label_list)


State 280

  105 subscript_list: subscript_list COMMA â¢ expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    expression                 go to state 319
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 281

  101 variable: variable L_BRACKET subscript_list R_BRACKET â¢

    $default  reduce using rule 101 (variable)


State 282

   96 statement: procid L_PAREN optional_expression_list R_PAREN â¢

    $default  reduce using rule 96 (statement)


State 283

  119 expression_list: expression_list COMMA â¢ expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    expression                 go to state 320
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 284

   20 constant_declaration: constant_declaration SEMICOLON constid EQ constant â¢

    $default  reduce using rule 20 (constant_declaration)


State 285

   22 type_declaration: type_declaration SEMICOLON typeid EQ type â¢

    $default  reduce using rule 22 (type_declaration)


State 286

   24 variable_declaration: variable_declaration SEMICOLON variableid_list COLON type â¢

    $default  reduce using rule 24 (variable_declaration)


State 287

   48 index_list: simple_type â¢

    $default  reduce using rule 48 (index_list)


State 288

   43 unpacked_structured_type: ARRAY L_BRACKET index_list â¢ R_BRACKET OF type
   49 index_list: index_list â¢ COMMA simple_type

    COMMA      shift, and go to state 321
    R_BRACKET  shift, and go to state 322


State 289

   60 variant_part: CASE tag_field â¢ OF variant_list

    OF  shift, and go to state 323


State 290

   61 tag_field: typeid â¢

    $default  reduce using rule 61 (tag_field)


State 291

   62 tag_field: identifier â¢ COLON typeid
  166 typeid: identifier â¢

    COLON  shift, and go to state 324

    $default  reduce using rule 166 (typeid)


State 292

   44 unpacked_structured_type: RECORD field_list END â¢

    $default  reduce using rule 44 (unpacked_structured_type)


State 293

   51 field_list: fixed_part SEMICOLON â¢ variant_part
   55 fixed_part: fixed_part SEMICOLON â¢ record_field

    CASE        shift, and go to state 222
    IDENTIFIER  shift, and go to state 8

    $default  reduce using rule 184 (empty)

    record_field  go to state 325
    fieldid_list  go to state 226
    variant_part  go to state 326
    fieldid       go to state 228
    identifier    go to state 208
    empty         go to state 327


State 294

   59 fieldid_list: fieldid_list COMMA â¢ fieldid

    IDENTIFIER  shift, and go to state 8

    fieldid     go to state 328
    identifier  go to state 208


State 295

   57 record_field: fieldid_list COLON â¢ type

    PACKED           shift, and go to state 135
    INTEGER          shift, and go to state 38
    REAL             shift, and go to state 39
    BOOLEAN          shift, and go to state 40
    CHAR             shift, and go to state 41
    ARRAY            shift, and go to state 136
    RECORD           shift, and go to state 137
    SET              shift, and go to state 138
    FILE_TOK         shift, and go to state 139
    STRING           shift, and go to state 42
    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CARET            shift, and go to state 142
    L_PAREN          shift, and go to state 143
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant                  go to state 147
    type                      go to state 329
    simple_type               go to state 149
    structured_type           go to state 150
    unpacked_structured_type  go to state 151
    constid                   go to state 152
    typeid                    go to state 153
    identifier                go to state 154
    integer_literal           go to state 155
    real_literal              go to state 156
    string_literal            go to state 157
    char_literal              go to state 158
    boolean_literal           go to state 159


State 296

   45 unpacked_structured_type: SET OF simple_type â¢

    $default  reduce using rule 45 (unpacked_structured_type)


State 297

   47 unpacked_structured_type: FILE_TOK OF type â¢

    $default  reduce using rule 47 (unpacked_structured_type)


State 298

   38 simple_type: L_PAREN identifier_list R_PAREN â¢

    $default  reduce using rule 38 (simple_type)


State 299

   39 simple_type: constant DOTDOT constant â¢

    $default  reduce using rule 39 (simple_type)


State 300

   77 formal_parameter_section: VAR parameterid_list COLON â¢ typeid

    INTEGER     shift, and go to state 38
    REAL        shift, and go to state 39
    BOOLEAN     shift, and go to state 40
    CHAR        shift, and go to state 41
    STRING      shift, and go to state 42
    IDENTIFIER  shift, and go to state 8

    typeid      go to state 330
    identifier  go to state 44


State 301

   78 formal_parameter_section: PROCEDURE identifier parameters â¢

    $default  reduce using rule 78 (formal_parameter_section)


State 302

   79 formal_parameter_section: FUNCTION identifier parameters â¢ COLON typeid

    COLON  shift, and go to state 331


State 303

   75 formal_parameter_list: formal_parameter_list SEMICOLON formal_parameter_section â¢

    $default  reduce using rule 75 (formal_parameter_list)


State 304

   81 parameterid_list: parameterid_list COMMA identifier â¢

    $default  reduce using rule 81 (parameterid_list)


State 305

   76 formal_parameter_section: parameterid_list COLON typeid â¢

    $default  reduce using rule 76 (formal_parameter_section)


State 306

   70 proc_or_func: FUNCTION funcid parameters COLON typeid SEMICOLON â¢ block_or_forward

    VAR        shift, and go to state 14
    CONST      shift, and go to state 15
    TYPE       shift, and go to state 16
    LABEL      shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    FUNCTION   shift, and go to state 19
    BEGIN_TOK  shift, and go to state 20
    FORWARD    shift, and go to state 244

    block                      go to state 245
    block1                     go to state 22
    block2                     go to state 23
    block3                     go to state 24
    block4                     go to state 25
    block5                     go to state 26
    label_declaration          go to state 27
    constant_declaration       go to state 28
    type_declaration           go to state 29
    variable_declaration       go to state 30
    proc_and_func_declaration  go to state 31
    proc_or_func               go to state 32
    block_or_forward           go to state 332


State 307

  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression
  159 element: expression DOTDOT expression â¢

    GT   shift, and go to state 182
    GTE  shift, and go to state 183
    LT   shift, and go to state 184
    LTE  shift, and go to state 185
    NEQ  shift, and go to state 186
    EQ   shift, and go to state 187

    $default  reduce using rule 159 (element)


State 308

  157 element_list_non_empty: element_list_non_empty COMMA element â¢

    $default  reduce using rule 157 (element_list_non_empty)


State 309

   89 statement: IF expression THEN statement ELSE â¢ statement

    BEGIN_TOK        shift, and go to state 56
    IF               shift, and go to state 57
    WITH             shift, and go to state 58
    WHILE            shift, and go to state 59
    FOR              shift, and go to state 60
    REPEAT           shift, and go to state 61
    CASE             shift, and go to state 62
    GOTO             shift, and go to state 63
    READ             shift, and go to state 47
    WRITE            shift, and go to state 48
    READLN           shift, and go to state 49
    WRITELN          shift, and go to state 50
    INTEGER_LITERAL  shift, and go to state 45
    IDENTIFIER       shift, and go to state 8

    statement         go to state 333
    variable          go to state 66
    label             go to state 67
    procid            go to state 68
    varid             go to state 69
    identifier        go to state 70
    unsigned_integer  go to state 71


State 310

  151 primary_expression: funcid L_PAREN optional_expression_list R_PAREN â¢

    $default  reduce using rule 151 (primary_expression)


State 311

   94 statement: FOR varid ASSIGN for_list DO â¢ statement

    BEGIN_TOK        shift, and go to state 56
    IF               shift, and go to state 57
    WITH             shift, and go to state 58
    WHILE            shift, and go to state 59
    FOR              shift, and go to state 60
    REPEAT           shift, and go to state 61
    CASE             shift, and go to state 62
    GOTO             shift, and go to state 63
    READ             shift, and go to state 47
    WRITE            shift, and go to state 48
    READLN           shift, and go to state 49
    WRITELN          shift, and go to state 50
    INTEGER_LITERAL  shift, and go to state 45
    IDENTIFIER       shift, and go to state 8

    statement         go to state 334
    variable          go to state 66
    label             go to state 67
    procid            go to state 68
    varid             go to state 69
    identifier        go to state 70
    unsigned_integer  go to state 71


State 312

  114 for_list: expression TO â¢ expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    expression                 go to state 335
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 313

  115 for_list: expression DOWNTO â¢ expression

    NIL              shift, and go to state 87
    CHR              shift, and go to state 53
    NOT              shift, and go to state 88
    PLUS             shift, and go to state 89
    MINUS            shift, and go to state 90
    L_PAREN          shift, and go to state 91
    L_BRACKET        shift, and go to state 92
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 45
    REAL_LITERAL     shift, and go to state 94
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    variable                   go to state 96
    expression                 go to state 336
    additive_expression        go to state 98
    multiplicative_expression  go to state 99
    unary_expression           go to state 100
    primary_expression         go to state 101
    funcid                     go to state 102
    varid                      go to state 69
    identifier                 go to state 103
    unsigned_integer           go to state 104
    unsigned_real              go to state 105
    string_literal             go to state 106
    char_literal               go to state 107


State 314

  112 case_label: constant DOTDOT â¢ constant

    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant         go to state 337
    constid          go to state 152
    identifier       go to state 37
    integer_literal  go to state 155
    real_literal     go to state 156
    string_literal   go to state 157
    char_literal     go to state 158
    boolean_literal  go to state 159


State 315

   90 statement: CASE expression OF case_list END â¢

    $default  reduce using rule 90 (statement)


State 316

   91 statement: CASE expression OF case_list SEMICOLON â¢ case_else END
  107 case_list: case_list SEMICOLON â¢ case_item

    ELSE             shift, and go to state 338
    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant         go to state 275
    case_item        go to state 339
    case_label_list  go to state 278
    case_label       go to state 279
    case_else        go to state 340
    constid          go to state 152
    identifier       go to state 37
    integer_literal  go to state 155
    real_literal     go to state 156
    string_literal   go to state 157
    char_literal     go to state 158
    boolean_literal  go to state 159


State 317

  110 case_label_list: case_label_list COMMA â¢ case_label

    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant         go to state 275
    case_label       go to state 341
    constid          go to state 152
    identifier       go to state 37
    integer_literal  go to state 155
    real_literal     go to state 156
    string_literal   go to state 157
    char_literal     go to state 158
    boolean_literal  go to state 159


State 318

  108 case_item: case_label_list COLON â¢ statement

    BEGIN_TOK        shift, and go to state 56
    IF               shift, and go to state 57
    WITH             shift, and go to state 58
    WHILE            shift, and go to state 59
    FOR              shift, and go to state 60
    REPEAT           shift, and go to state 61
    CASE             shift, and go to state 62
    GOTO             shift, and go to state 63
    READ             shift, and go to state 47
    WRITE            shift, and go to state 48
    READLN           shift, and go to state 49
    WRITELN          shift, and go to state 50
    INTEGER_LITERAL  shift, and go to state 45
    IDENTIFIER       shift, and go to state 8

    statement         go to state 342
    variable          go to state 66
    label             go to state 67
    procid            go to state 68
    varid             go to state 69
    identifier        go to state 70
    unsigned_integer  go to state 71


State 319

  105 subscript_list: subscript_list COMMA expression â¢
  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression

    GT   shift, and go to state 182
    GTE  shift, and go to state 183
    LT   shift, and go to state 184
    LTE  shift, and go to state 185
    NEQ  shift, and go to state 186
    EQ   shift, and go to state 187

    $default  reduce using rule 105 (subscript_list)


State 320

  119 expression_list: expression_list COMMA expression â¢
  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression

    GT   shift, and go to state 182
    GTE  shift, and go to state 183
    LT   shift, and go to state 184
    LTE  shift, and go to state 185
    NEQ  shift, and go to state 186
    EQ   shift, and go to state 187

    $default  reduce using rule 119 (expression_list)


State 321

   49 index_list: index_list COMMA â¢ simple_type

    INTEGER          shift, and go to state 38
    REAL             shift, and go to state 39
    BOOLEAN          shift, and go to state 40
    CHAR             shift, and go to state 41
    STRING           shift, and go to state 42
    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    L_PAREN          shift, and go to state 143
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant         go to state 147
    simple_type      go to state 343
    constid          go to state 152
    typeid           go to state 153
    identifier       go to state 154
    integer_literal  go to state 155
    real_literal     go to state 156
    string_literal   go to state 157
    char_literal     go to state 158
    boolean_literal  go to state 159


State 322

   43 unpacked_structured_type: ARRAY L_BRACKET index_list R_BRACKET â¢ OF type

    OF  shift, and go to state 344


State 323

   60 variant_part: CASE tag_field OF â¢ variant_list

    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    $default  reduce using rule 184 (empty)

    constant         go to state 275
    variant_list     go to state 345
    variant          go to state 346
    case_label_list  go to state 347
    case_label       go to state 279
    constid          go to state 152
    identifier       go to state 37
    integer_literal  go to state 155
    real_literal     go to state 156
    string_literal   go to state 157
    char_literal     go to state 158
    boolean_literal  go to state 159
    empty            go to state 348


State 324

   62 tag_field: identifier COLON â¢ typeid

    INTEGER     shift, and go to state 38
    REAL        shift, and go to state 39
    BOOLEAN     shift, and go to state 40
    CHAR        shift, and go to state 41
    STRING      shift, and go to state 42
    IDENTIFIER  shift, and go to state 8

    typeid      go to state 349
    identifier  go to state 44


State 325

   55 fixed_part: fixed_part SEMICOLON record_field â¢

    $default  reduce using rule 55 (fixed_part)


State 326

   51 field_list: fixed_part SEMICOLON variant_part â¢

    $default  reduce using rule 51 (field_list)


State 327

   56 record_field: empty â¢

    $default  reduce using rule 56 (record_field)


State 328

   59 fieldid_list: fieldid_list COMMA fieldid â¢

    $default  reduce using rule 59 (fieldid_list)


State 329

   57 record_field: fieldid_list COLON type â¢

    $default  reduce using rule 57 (record_field)


State 330

   77 formal_parameter_section: VAR parameterid_list COLON typeid â¢

    $default  reduce using rule 77 (formal_parameter_section)


State 331

   79 formal_parameter_section: FUNCTION identifier parameters COLON â¢ typeid

    INTEGER     shift, and go to state 38
    REAL        shift, and go to state 39
    BOOLEAN     shift, and go to state 40
    CHAR        shift, and go to state 41
    STRING      shift, and go to state 42
    IDENTIFIER  shift, and go to state 8

    typeid      go to state 350
    identifier  go to state 44


State 332

   70 proc_or_func: FUNCTION funcid parameters COLON typeid SEMICOLON block_or_forward â¢

    $default  reduce using rule 70 (proc_or_func)


State 333

   89 statement: IF expression THEN statement ELSE statement â¢

    $default  reduce using rule 89 (statement)


State 334

   94 statement: FOR varid ASSIGN for_list DO statement â¢

    $default  reduce using rule 94 (statement)


State 335

  114 for_list: expression TO expression â¢
  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression

    GT   shift, and go to state 182
    GTE  shift, and go to state 183
    LT   shift, and go to state 184
    LTE  shift, and go to state 185
    NEQ  shift, and go to state 186
    EQ   shift, and go to state 187

    $default  reduce using rule 114 (for_list)


State 336

  115 for_list: expression DOWNTO expression â¢
  123 expression: expression â¢ LT additive_expression
  124           | expression â¢ LTE additive_expression
  125           | expression â¢ EQ additive_expression
  126           | expression â¢ NEQ additive_expression
  127           | expression â¢ GTE additive_expression
  128           | expression â¢ GT additive_expression

    GT   shift, and go to state 182
    GTE  shift, and go to state 183
    LT   shift, and go to state 184
    LTE  shift, and go to state 185
    NEQ  shift, and go to state 186
    EQ   shift, and go to state 187

    $default  reduce using rule 115 (for_list)


State 337

  112 case_label: constant DOTDOT constant â¢

    $default  reduce using rule 112 (case_label)


State 338

  113 case_else: ELSE â¢ statement SEMICOLON

    BEGIN_TOK        shift, and go to state 56
    IF               shift, and go to state 57
    WITH             shift, and go to state 58
    WHILE            shift, and go to state 59
    FOR              shift, and go to state 60
    REPEAT           shift, and go to state 61
    CASE             shift, and go to state 62
    GOTO             shift, and go to state 63
    READ             shift, and go to state 47
    WRITE            shift, and go to state 48
    READLN           shift, and go to state 49
    WRITELN          shift, and go to state 50
    INTEGER_LITERAL  shift, and go to state 45
    IDENTIFIER       shift, and go to state 8

    statement         go to state 351
    variable          go to state 66
    label             go to state 67
    procid            go to state 68
    varid             go to state 69
    identifier        go to state 70
    unsigned_integer  go to state 71


State 339

  107 case_list: case_list SEMICOLON case_item â¢

    $default  reduce using rule 107 (case_list)


State 340

   91 statement: CASE expression OF case_list SEMICOLON case_else â¢ END

    END  shift, and go to state 352


State 341

  110 case_label_list: case_label_list COMMA case_label â¢

    $default  reduce using rule 110 (case_label_list)


State 342

  108 case_item: case_label_list COLON statement â¢

    $default  reduce using rule 108 (case_item)


State 343

   49 index_list: index_list COMMA simple_type â¢

    $default  reduce using rule 49 (index_list)


State 344

   43 unpacked_structured_type: ARRAY L_BRACKET index_list R_BRACKET OF â¢ type

    PACKED           shift, and go to state 135
    INTEGER          shift, and go to state 38
    REAL             shift, and go to state 39
    BOOLEAN          shift, and go to state 40
    CHAR             shift, and go to state 41
    ARRAY            shift, and go to state 136
    RECORD           shift, and go to state 137
    SET              shift, and go to state 138
    FILE_TOK         shift, and go to state 139
    STRING           shift, and go to state 42
    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CARET            shift, and go to state 142
    L_PAREN          shift, and go to state 143
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    constant                  go to state 147
    type                      go to state 353
    simple_type               go to state 149
    structured_type           go to state 150
    unpacked_structured_type  go to state 151
    constid                   go to state 152
    typeid                    go to state 153
    identifier                go to state 154
    integer_literal           go to state 155
    real_literal              go to state 156
    string_literal            go to state 157
    char_literal              go to state 158
    boolean_literal           go to state 159


State 345

   60 variant_part: CASE tag_field OF variant_list â¢
   64 variant_list: variant_list â¢ SEMICOLON variant

    SEMICOLON  shift, and go to state 354

    $default  reduce using rule 60 (variant_part)


State 346

   63 variant_list: variant â¢

    $default  reduce using rule 63 (variant_list)


State 347

   66 variant: case_label_list â¢ COLON L_PAREN field_list R_PAREN
  110 case_label_list: case_label_list â¢ COMMA case_label

    COMMA  shift, and go to state 317
    COLON  shift, and go to state 355


State 348

   65 variant: empty â¢

    $default  reduce using rule 65 (variant)


State 349

   62 tag_field: identifier COLON typeid â¢

    $default  reduce using rule 62 (tag_field)


State 350

   79 formal_parameter_section: FUNCTION identifier parameters COLON typeid â¢

    $default  reduce using rule 79 (formal_parameter_section)


State 351

  113 case_else: ELSE statement â¢ SEMICOLON

    SEMICOLON  shift, and go to state 356


State 352

   91 statement: CASE expression OF case_list SEMICOLON case_else END â¢

    $default  reduce using rule 91 (statement)


State 353

   43 unpacked_structured_type: ARRAY L_BRACKET index_list R_BRACKET OF type â¢

    $default  reduce using rule 43 (unpacked_structured_type)


State 354

   64 variant_list: variant_list SEMICOLON â¢ variant

    PLUS             shift, and go to state 140
    MINUS            shift, and go to state 141
    CHAR_LITERAL     shift, and go to state 93
    INTEGER_LITERAL  shift, and go to state 144
    REAL_LITERAL     shift, and go to state 145
    BOOLEAN_LITERAL  shift, and go to state 146
    IDENTIFIER       shift, and go to state 8
    STRING_LITERAL   shift, and go to state 95

    $default  reduce using rule 184 (empty)

    constant         go to state 275
    variant          go to state 357
    case_label_list  go to state 347
    case_label       go to state 279
    constid          go to state 152
    identifier       go to state 37
    integer_literal  go to state 155
    real_literal     go to state 156
    string_literal   go to state 157
    char_literal     go to state 158
    boolean_literal  go to state 159
    empty            go to state 348


State 355

   66 variant: case_label_list COLON â¢ L_PAREN field_list R_PAREN

    L_PAREN  shift, and go to state 358


State 356

  113 case_else: ELSE statement SEMICOLON â¢

    $default  reduce using rule 113 (case_else)


State 357

   64 variant_list: variant_list SEMICOLON variant â¢

    $default  reduce using rule 64 (variant_list)


State 358

   66 variant: case_label_list COLON L_PAREN â¢ field_list R_PAREN

    CASE        shift, and go to state 222
    IDENTIFIER  shift, and go to state 8

    $default  reduce using rule 184 (empty)

    field_list    go to state 359
    fixed_part    go to state 224
    record_field  go to state 225
    fieldid_list  go to state 226
    variant_part  go to state 227
    fieldid       go to state 228
    identifier    go to state 208
    empty         go to state 229


State 359

   66 variant: case_label_list COLON L_PAREN field_list â¢ R_PAREN

    R_PAREN  shift, and go to state 360


State 360

   66 variant: case_label_list COLON L_PAREN field_list R_PAREN â¢

    $default  reduce using rule 66 (variant)
