# THIS VERSION IS 100% generated by IA based on my previous versions (0 > 0 > 5 > 10 > 15 > 40 > 50 > 100)
# ===========================
# Configura√ß√£o
# ===========================
CC       ?= gcc
FILE     ?= tests/complex-test.pascalm
TEST_DIR ?= tests
OUT_DIR  ?= build/gen
BUILD_DIR?= build

MAKEFLAGS += -s

SRC_DIRS = parser ast semantic-analyzer symbol-table code-generation

PASCAL_FILES = $(wildcard $(TEST_DIR)/*.pascalm)
C_GEN        = $(patsubst $(TEST_DIR)/%.pascalm,$(OUT_DIR)/%.c,$(PASCAL_FILES))
BINARIES     = $(patsubst $(TEST_DIR)/%.pascalm,$(OUT_DIR)/%,$(PASCAL_FILES))

PARSER_OUTPUTS = parser/parser.tab.c parser/parser.tab.h parser/lex.yy.c

PARSER_SRCS  = parser/parser.tab.c parser/lex.yy.c parser/utils.c
SRCS         = $(wildcard $(addsuffix /*.c, $(SRC_DIRS))) main.c context.c logger.c $(PARSER_SRCS)
OBJS         = $(SRCS:%.c=$(BUILD_DIR)/%.o)

TARGET = pascalm

DEBUG   ?= 0
VERBOSE ?= 0
SHOW_WARNINGS ?= 0

WARNING_LOG := $(BUILD_DIR)/warnings.log

# ===========================
# Cores
# ===========================
COLOR_RESET = \033[0m
COLOR_GREEN = \033[0;32m
COLOR_BLUE  = \033[0;34m
COLOR_YELLOW= \033[1;33m
COLOR_RED   = \033[0;31m
COLOR_CYAN  = \033[0;36m

# ===========================
# Flags
# ===========================
PASCALM_FLAGS = -f $(FILE)

CFLAGS = -Wall -Wextra

ifeq ($(DEBUG),1)
	CFLAGS += -g -fsanitize=address -fsanitize=undefined -DDEBUG
	BUILD_TYPE = Debug
	BFLAGS = -t -d -Wcounterexamples
else
	CFLAGS += -O2
	BUILD_TYPE = Release
	BFLAGS = -d -Wcounterexamples
endif

ifeq ($(VERBOSE),1)
	CFLAGS += -DVERBOSE_MODE
	PASCALM_FLAGS += -v
endif

# ===========================
# Controle de Verbosidade
# ===========================
ifneq ($(filter 1,$(SHOW_WARNINGS) $(DEBUG)),)
	SILENT :=
	OUTPUT_REDIRECT :=
else
	SILENT := @
	OUTPUT_REDIRECT := >> $(WARNING_LOG) 2>&1
endif

define run
	@{ \
		printf "$(COLOR_CYAN)‚ñ∂ $(1)$(COLOR_RESET)\n"; \
		if ! $(2) $(OUTPUT_REDIRECT); then \
			printf "$(COLOR_RED)‚úñ Error: Command failed -> $(2)$(COLOR_RESET)\n"; \
			exit 1; \
		fi \
	}
endef

# ===========================
# Targets principais
# ===========================

.PHONY: all clean test compile-c parser

all: prepare $(TARGET)
	@printf "$(COLOR_GREEN)‚úî Build mode: $(BUILD_TYPE) completed.$(COLOR_RESET)\n"
ifeq ($(SHOW_WARNINGS),0)
	@if [ -s $(WARNING_LOG) ]; then \
		printf "$(COLOR_YELLOW)‚ö†Ô∏è  Warnings were captured in $(WARNING_LOG). Run SHOW_WARNINGS=1 to see them.$(COLOR_RESET)\n"; \
	fi
endif

prepare:
	@mkdir -p $(BUILD_DIR) $(OUT_DIR)
	@test -f $(WARNING_LOG) || touch $(WARNING_LOG)

$(TARGET): $(OBJS)
	@printf "$(COLOR_CYAN)üîó Linking $(TARGET)$(COLOR_RESET)\n"
	$(SILENT) $(CC) $(CFLAGS) -o $@ $^ $(OUTPUT_REDIRECT)

# ===========================
# Compila√ß√£o dos objetos
# ===========================

$(BUILD_DIR)/%.o: %.c $(PARSER_OUTPUTS)
	@mkdir -p $(dir $@)
	@printf "$(COLOR_BLUE)‚öôÔ∏è  Compiling %s$(COLOR_RESET)\n" $<
	$(SILENT) $(CC) $(CFLAGS) -c $< -o $@ $(OUTPUT_REDIRECT)

# ===========================
# Parser (Flex + Bison)
# ===========================

parser: $(PARSER_OUTPUTS)

parser/parser.tab.c parser/parser.tab.h: parser/parser.y | prepare
	$(call run, Generating parser (bison), bison $(BFLAGS) -o parser/parser.tab.c $<)

parser/lex.yy.c: parser/parser.l parser/parser.tab.h | prepare
	$(call run, Generating lexer (flex), flex -o $@ $<)

# ===========================
# Teste r√°pido
# ===========================

test: $(TARGET)
	@printf "$(COLOR_GREEN)üöÄ Running test with $(FILE)$(COLOR_RESET)\n"
	$(SILENT) ./$(TARGET) $(PASCALM_FLAGS) $(OUTPUT_REDIRECT)

# ===========================
# Gerar c√≥digo C dos arquivos .pascalm
# ===========================

compile-c: $(BINARIES)

$(OUT_DIR)/%.c: $(TEST_DIR)/%.pascalm $(TARGET) parser | prepare
	@mkdir -p $(OUT_DIR)
	-$(call run, Generating C from $<, ./$(TARGET) -f $< -o $@)

$(OUT_DIR)/%: $(OUT_DIR)/%.c | prepare
	-$(call run, Compiling binary $@, $(CC) $(CFLAGS) $< -o $@)

# ===========================
# Limpeza
# ===========================

clean: prepare
	@printf "$(COLOR_RED)üßπ Cleaning project$(COLOR_RESET)\n"
	@rm -rf $(BUILD_DIR) $(OUT_DIR) $(TARGET) parser/lex.yy.c parser/parser.tab.c parser/parser.tab.h $(TARGET).dSYM $(WARNING_LOG) $(OUTPUT_REDIRECT)
